{
	"Version":2,
	"Scope":0,
	"TargetPath":"Controller.g.cs",
	"Overwritable": true
}
*** body starts here ***
#region using
using `DataProjectNamespace`;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
#endregion

namespace `SolutionName`.Web.Controllers;

public abstract partial class EntityController<T> : ControllerBase where T : Entity<T>, new()
{
    [HttpGet]
    public virtual async Task<List<T>> Get()
    {
        return await Dao.Get<T>().GetAsync();
    }
    
    [HttpGet("first")]
    public virtual async Task<T> GetFirst()
    {
        return await Dao.Get<T>().GetFirstAsync();
    }

    [HttpGet("count")]
    public virtual async Task<int> GetCount()
    {
        return await Dao.Get<T>().GetCountAsync();
    }

    [HttpPost]
    public virtual async Task<T> Insert(T entity)
    {
        return await Dao.Get<T>().InsertAsync(entity);
    }

    [HttpPut]
    public virtual async Task<int> Update(T entity)
    {
        return await Dao.Get<T>().UpdateAsync(entity);
    }
}

`T
#region `Name`Controller
public abstract partial class `Name`ControllerBase : EntityController<`Name`>
{
    [HttpGet("`P:/:{`name`}``")]
    public virtual async Task<`Name`> GetByKey(`P:, :`Type` `name` ``)
    {
        return await Dao.`Name`.GetByKeyAsync(`P:, :`name` ``);
    }

    [HttpGet("exists/`P:/:{`name`}``")]
    public virtual async Task<bool> ExistsByKey(`P:, :`Type` `name` ``)
    {
        return await Dao.`Name`.ExistsByKeyAsync(`P:, :`name` ``);
    }

    `F::[HttpGet("`Name`/{`name`}")]
    public virtual async Task<List<`Table`>> GetBy`Name`(`Type` `name`)
    {
        return await Dao.`Table`.GetBy`Name`Async(`name`);
    }
    ``

    [HttpDelete("`P:/:{`name`}``")]
    public virtual async Task<int> DeleteByKey(`P:, :`Type` `name` ``)
    {
        return await Dao.`Name`.DeleteByKeyAsync(`P:,:`name` ``);
    }
    
    [HttpGet("last")]
    public virtual async Task<`Name`> GetLast()
    {
        return await Dao.`Name`.GetLastAsync(x => new {`P:, :x.`Name` ``} );
    }
}

[Route("api/[controller]")]
[ApiController]
public partial class `Name`Controller : `Name`ControllerBase
{
}
#endregion
T`