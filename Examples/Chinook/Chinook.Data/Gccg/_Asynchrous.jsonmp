{
	"Version":2,
	"Scope":0,
	"TargetPath":"Asynchrous.g.cs",
	"Overwritable": true
}
*** body starts here ***// <auto-generated> This file has been generated by Gccg</auto-generated>

#region usings
using System.ComponentModel;
using System.ComponentModel.DataAnnotations.Schema;
using System.Diagnostics;
using System.Linq.Expressions;
using System.Reflection;
using System.Text;
using System.Text.Json.Serialization;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Query;
using Microsoft.Extensions.Logging;
#endregion

namespace `DataProjectNamespace`;

#region EntityDao<T>
public abstract partial class EntityDao<T> where T : Entity<T>, new()
{
    #region GetAsync
    public virtual async Task<List<T>> GetAsync(CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore<T>(null, null, true, 0, int.MaxValue, context).ToListAsync(ctk);
    }

    public virtual async Task<T[]> GetAsArrayAsync(CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore<T>(null, null, true, 0, int.MaxValue, context).ToArrayAsync(ctk);
    }

    public virtual async Task<HashSet<T>> GetAsHashSetAsync(CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore<T>(null, null, true, 0, int.MaxValue, context).ToHashSetAsync(ctk);
    }

    public virtual async Task<Dictionary<K, T>> GetAsDictionaryAsync<K>(Func<T, K> keySelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore<T>(null, null, true, 0, int.MaxValue, context).ToDictionaryAsync(keySelector, ctk);
    }

    public virtual async Task<Dictionary<K, E>> GetAsDictionaryAsync<K, E>(Func<T, K> keySelector, Func<T, E> elementSelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore<T>(null, null, true, 0, int.MaxValue, context).ToDictionaryAsync(keySelector, elementSelector, ctk);
    }

    public virtual async Task<List<T>> GetAsync(Expression<Func<T, bool>> where, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore<T>(where, null, true, 0, int.MaxValue, context).ToListAsync(ctk);
    }

    public virtual async Task<T[]> GetAsArrayAsync(Expression<Func<T, bool>> where, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore<T>(where, null, true, 0, int.MaxValue, context).ToArrayAsync(ctk);
    }

    public virtual async Task<HashSet<T>> GetAsHashSetAsync(Expression<Func<T, bool>> where, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore<T>(where, null, true, 0, int.MaxValue, context).ToHashSetAsync(ctk);
    }

    public virtual async Task<Dictionary<K, T>> GetAsDictionaryAsync<K>(
        Expression<Func<T, bool>> where, Func<T, K> keySelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore<T>(where, null, true, 0, int.MaxValue, context).ToDictionaryAsync(keySelector, ctk);
    }

    public virtual async Task<Dictionary<K, E>> GetAsDictionaryAsync<K, E>(
        Expression<Func<T, bool>> where, Func<T, K> keySelector, Func<T, E> elementSelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore<T>(where, null, true, 0, int.MaxValue, context).ToDictionaryAsync(keySelector, elementSelector, ctk);
    }

    public virtual async Task<List<T>> GetAsync<O>(Expression<Func<T, O>> orderBy, bool ascending, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore(null, orderBy, ascending, 0, int.MaxValue, context).ToListAsync(ctk);
    }

    public virtual async Task<T[]> GetAsArrayAsync<O>(Expression<Func<T, O>> orderBy, bool ascending, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore(null, orderBy, ascending, 0, int.MaxValue, context).ToArrayAsync(ctk);
    }

    public virtual async Task<List<T>> GetAsync<O>(Expression<Func<T, O>> orderBy, bool ascending, int startRowIndex, int maximumRows, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore(null, orderBy, ascending, startRowIndex, maximumRows, context).ToListAsync(ctk);
    }
    
    public virtual async Task<T[]> GetAsArrayAsync<O>(Expression<Func<T, O>> orderBy, bool ascending, int startRowIndex, int maximumRows, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore(null, orderBy, ascending, startRowIndex, maximumRows, context).ToArrayAsync(ctk);
    }

    public virtual async Task<List<T>> GetAsync<O>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, bool ascending, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore(where, orderBy, ascending, 0, int.MaxValue, context).ToListAsync(ctk);
    }

    public virtual async Task<T[]> GetAsArrayAsync<O>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, bool ascending, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore(where, orderBy, ascending, 0, int.MaxValue, context).ToArrayAsync(ctk);
    }

    public virtual async Task<List<T>> GetAsync<O>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, bool ascending, int startRowIndex, int maximumRows, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore(where, orderBy, ascending, startRowIndex, maximumRows, context).ToListAsync(ctk);
    }
    
    public virtual async Task<T[]> GetAsArrayAsync<O>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, bool ascending, int startRowIndex, int maximumRows, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore(where, orderBy, ascending, startRowIndex, maximumRows, context).ToArrayAsync(ctk);
    }
    #endregion GetAsync

	#region SelectAsync
    public virtual async Task<List<S>> SelectAsync<S>(Expression<Func<T, S>> select,
        CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore<T>(null, null, true, 0, int.MaxValue, context);
        return await query.Select(select).ToListAsync(ctk);
    }

    public virtual async Task<S[]> SelectAsArrayAsync<S>(Expression<Func<T, S>> select, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore<T>(null, null, true, 0, int.MaxValue, context);
        return await query.Select(select).ToArrayAsync(ctk);
    }

    public virtual async Task<HashSet<S>> SelectAsHashSetAsync<S>(Expression<Func<T, S>> select, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore<T>(null, null, true, 0, int.MaxValue, context);
        return await query.Select(select).ToHashSetAsync(ctk);
    }

    public virtual async Task<List<S>> SelectAsync<S>(Expression<Func<T, bool>> where, Expression<Func<T, S>> select, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore<T>(where, null, true, 0, int.MaxValue, context);
        return await query.Select(select).ToListAsync(ctk);
    }

    public virtual async Task<S[]> SelectAsArrayAsync<S>(Expression<Func<T, bool>> where, Expression<Func<T, S>> select, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore<T>(where, null, true, 0, int.MaxValue, context);
        return await query.Select(select).ToArrayAsync(ctk);
    }

    public virtual async Task<HashSet<S>> SelectAsHashSetAsync<S>(Expression<Func<T, bool>> where, Expression<Func<T, S>> select, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore<T>(where, null, true, 0, int.MaxValue, context);
        return await query.Select(select).ToHashSetAsync(ctk);
    }

    public virtual async Task<List<S>> SelectAsync<O, S>(Expression<Func<T, O>> orderBy, bool ascending, Expression<Func<T, S>> select, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore(null, orderBy, ascending, 0, int.MaxValue, context);
        return await query.Select(select).ToListAsync(ctk);
    }

    public virtual async Task<S[]> SelectAsArrayAsync<O, S>(Expression<Func<T, O>> orderBy, bool ascending, Expression<Func<T, S>> select, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore(null, orderBy, ascending, 0, int.MaxValue, context);
        return await query.Select(select).ToArrayAsync(ctk);
    }

    public virtual async Task<List<S>> SelectAsync<O, S>(Expression<Func<T, O>> orderBy, bool ascending, int startRowIndex, int maximumRows, Expression<Func<T, S>> select, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore(null, orderBy, ascending, startRowIndex, maximumRows, context);
        return await query.Select(select).ToListAsync(ctk);
    }

    public virtual async Task<S[]> SelectAsArrayAsync<O, S>(Expression<Func<T, O>> orderBy, bool ascending, int startRowIndex, int maximumRows, Expression<Func<T, S>> select, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore(null, orderBy, ascending, startRowIndex, maximumRows, context);
        return await query.Select(select).ToArrayAsync(ctk);
    }

    public virtual async Task<List<S>> SelectAsync<O, S>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, bool ascending, Expression<Func<T, S>> select, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore(where, orderBy, ascending, 0, int.MaxValue, context);
        return await query.Select(select).ToListAsync(ctk);
    }

    public virtual async Task<S[]> SelectAsArrayAsync<O, S>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, bool ascending, Expression<Func<T, S>> select, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore(where, orderBy, ascending, 0, int.MaxValue, context);
        return await query.Select(select).ToArrayAsync(ctk);
    }

    public virtual async Task<List<S>> SelectAsync<O, S>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, bool ascending, int startRowIndex, int maximumRows, Expression<Func<T, S>> select, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore(where, orderBy, ascending, startRowIndex, maximumRows, context);
        return await query.Select(select).ToListAsync(ctk);
    }

    public virtual async Task<S[]> SelectAsArrayAsync<O, S>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, bool ascending, int startRowIndex, int maximumRows, Expression<Func<T, S>> select, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore(where, orderBy, ascending, startRowIndex, maximumRows, context);
        return await query.Select(select).ToArrayAsync(ctk);
    }
	#endregion SelectAsync

	#region GetFirstAsync / GetLastAsync
    public virtual Task<T> GetFirstAsync(CancellationToken ctk = default)
        => GetScalar<T>(null, null, true, ctk);

    public virtual Task<T> GetFirstAsync(Expression<Func<T, bool>> where, CancellationToken ctk = default) 
        => GetScalar<T>(where, null, true, ctk);

    public virtual Task<T> GetFirstAsync<O>(Expression<Func<T, O>> orderBy, CancellationToken ctk = default)
        => GetScalar<O>(null, orderBy, true, ctk);

    public virtual Task<T> GetFirstAsync<O>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, CancellationToken ctk = default)
        => GetScalar(where, orderBy, true, ctk);

	private async Task<T> GetScalar<O>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, bool ascending, CancellationToken ctk)
	{
        await using var context = DbContextFactory.Create();

	    return await GetScalarCore(where, orderBy, ascending, context).FirstOrDefaultAsync(ctk);
	}

    public virtual Task<T> GetLastAsync<O>(Expression<Func<T, O>> orderBy, CancellationToken ctk = default)
        => GetScalar(null, orderBy, false, ctk);

    public virtual Task<T> GetLastAsync<O>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, CancellationToken ctk = default)
        => GetScalar(where, orderBy, false, ctk);
	#endregion GetFirstAsync / GetLastAsync

	#region SelectFirstAsync / SelectLastAsync
    public virtual Task<S> SelectFirstAsync<S>(Expression<Func<T, S>> select, CancellationToken ctk = default)
        => SelectScalar<T, S>(null, null, select, false, ctk);

    public virtual Task<S> SelectFirstAsync<S>(Expression<Func<T, bool>> where, Expression<Func<T, S>> select, CancellationToken ctk = default)
        => SelectScalar<T, S>(where, null, select, false, ctk);

    public virtual Task<S> SelectFirstAsync<O, S>(Expression<Func<T, O>> orderBy, Expression<Func<T, S>> select, CancellationToken ctk = default)
        => SelectScalar(null, orderBy, select, true, ctk);

    public virtual Task<S> SelectFirstAsync<O, S>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, Expression<Func<T, S>> select, CancellationToken ctk = default)
        => SelectScalar(where, orderBy, select, true, ctk);

    private async Task<S> SelectScalar<O, S>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, Expression<Func<T, S>> select, bool ascending, CancellationToken ctk)
	{
        await using var context = DbContextFactory.Create();

		var query = GetScalarCore(where, orderBy, ascending, context);
		return await query.Select(select).FirstOrDefaultAsync();
	}

    public virtual Task<S> SelectLastAsync<O, S>(Expression<Func<T, O>> orderBy, Expression<Func<T, S>> select, CancellationToken ctk = default)
        => SelectScalar(null, orderBy, select, false, ctk);

    public virtual Task<S> SelectLastAsync<O, S>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, Expression<Func<T, S>> select, CancellationToken ctk = default)
        => SelectScalar(where, orderBy, select, false, ctk);
    #endregion SelectFirstAsync / SelectLastAsync

	#region GetCountAsync
    public virtual Task<int> GetCountAsync(CancellationToken ctk = default)
        => GetCountAsync(null);

    public virtual async Task<int> GetCountAsync(Expression<Func<T, bool>> where, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = MakeCountQuery(where, context);
        return await query.CountAsync(ctk);
    }

	#endregion GetCountAsync

	#region ExistAsync
    public virtual async Task<bool> ExistsAsync(Expression<Func<T, bool>> where, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = MakeCountQuery(where, context);
        return await query.AnyAsync();
    }
	#endregion ExistAsync

	#region InsertAsync / UpdateAsync / DeleteAsync
    
    internal async Task<(int Count, T Entity)> SaveChanges(LogType logType, CancellationToken ctk, params IEnumerable<T> entities)
	{
        await using var context = DbContextFactory.Create();

        foreach (var entity in entities)
    		MarkToSave(context, logType, entity);
			
		int count = await context.SaveChangesAsync(ctk);
		if (count > 0)
            foreach (var entity in entities)
    			OnSaved(entity, logType);

        return (count, count > 0 ? entities.First() : null);
	}

	public virtual async Task<T> InsertAsync(T entity, CancellationToken ctk = default)
        => (await SaveChanges(LogType.Insert, ctk, entity)).Entity;

	public virtual async Task<int> InsertManyAsync(IEnumerable<T> entities, CancellationToken ctk = default)
        => (await SaveChanges(LogType.Insert, ctk, entities)).Count;

	public virtual async Task<int> UpdateAsync(T entity, CancellationToken ctk = default) 
        => (await SaveChanges(LogType.Update, ctk, entity)).Count;

	public virtual async Task<int> UpdateManyAsync(IEnumerable<T> entities, CancellationToken ctk = default) 
        => (await SaveChanges(LogType.Update, ctk, entities)).Count;

	public virtual async Task<int> DeleteAsync(T entity, CancellationToken ctk = default) 
        => (await SaveChanges(LogType.Delete, ctk, entity)).Count;

	public virtual async Task<int> DeleteManyAsync(IEnumerable<T> entities, CancellationToken ctk = default) 
        => (await SaveChanges(LogType.Delete, ctk, entities)).Count;

	public virtual async Task<int> DeleteAllAsync(Expression<Func<T, bool>> where, CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

		var entities = await GetAsync(where);

        return await DeleteManyAsync(entities, ctk);
	}

    public virtual async Task<T> InsertIfNotExistAsync(T entity, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        int count = await context.Set<T>().CountAsync(HasSameKey(entity), ctk);
        if (count > 0)
            return null;

        return await InsertAsync(entity, ctk);
    }

    public virtual async Task<bool> InsertOrUpdateAsync(T entity, bool withAudit = false, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        int count = await context.Set<T>().CountAsync(HasSameKey(entity), ctk);
        if (count > 0)
        {
            await UpdateAsync(entity, ctk);
            return false;
        }
        else
        {
            await InsertAsync(entity, ctk);
            return true;
        }
    }	
	#endregion InsertAsync / UpdateAsync / DeleteAsync

    #region ExecuteUpdateAsync / ExecuteDeleteAsync
    public async Task<int> ExecuteUpdateAsync(Expression<Func<T, bool>> predicate, Expression<Func<SetPropertyCalls<T>, SetPropertyCalls<T>>> setPropertyCalls, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await context.Set<T>().Where(predicate).ExecuteUpdateAsync(setPropertyCalls, ctk);
    }

    public async Task<int> ExecuteDeleteAsync(Expression<Func<T, bool>> predicate, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await context.Set<T>().Where(predicate).ExecuteDeleteAsync(ctk);
    }
    #endregion ExecuteUpdateAsync / ExecuteDeleteAsync
}
#endregion EntityDao<T>

`T #region `Name`Dao
public partial class `Name`Dao
{
	public async Task<`Name`> GetByKeyAsync(`P:, :`Type` `name` ``, CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

        return await context.Set<`Name`>().FirstOrDefaultAsync(x => `P: && : x.`Name` == `name` ``, ctk);
	}

	public async Task<bool> ExistsByKeyAsync(`P:, :`Type` `name` ``, CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

		return await context.Set<`Name`>().CountAsync(x => `P: && : x.`Name` == `name` ``, ctk) > 0;
	}

	public async Task<int> DeleteByKeyAsync(`P:, :`Type` `name` ``, CancellationToken ctk = default)
	{
        var entity = await GetByKeyAsync(`P:, :`name` ``, ctk);

        if (entity == null)
            return 0;

        return await DeleteAsync(entity, ctk);
	}
	
	`F::
	#region GetBy`Name`
    public async Task<List<`Table`>> GetBy`Name`Async(`Type` `name`, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetBy`Name`Core(context, `name`).ToListAsync(ctk);
    }
    
    public async Task<`Table`[]> GetBy`Name`AsArrayAsync(`Type` `name`, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetBy`Name`Core(context, `name`).ToArrayAsync(ctk);
    }
    
    public async Task<HashSet<`Table`>> GetBy`Name`AsHastSetAsync(`Type` `name`, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetBy`Name`Core(context, `name`).ToHashSetAsync(ctk);
    }
    
    public async Task<Dictionary<K, `Table`>> GetBy`Name`AsDictionaryAsync<K>(`Type` `name`, Func<`Table`, K> keySelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetBy`Name`Core(context, `name`).ToDictionaryAsync(keySelector, ctk);
    }
    
    public async Task<Dictionary<K, E>> GetBy`Name`AsDictionaryAsync<K, E>(`Type` `name`, Func<`Table`, K> keySelector,Func<`Table`, E> elementSelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetBy`Name`Core(context, `name`).ToDictionaryAsync(keySelector, elementSelector, ctk);
    }
    #endregion
    ``

    public Task<int> ExecuteDeleteByKeyAsync(`P:, :`Type` `name` ``)
        => ExecuteDeleteAsync(x => `P:&& :x.`Name` == `name` ``);

    public Task<int> ExecuteUpdateByKeyAsync(`P:, :`Type` `name` ``, Expression<Func<SetPropertyCalls<`Name`>, SetPropertyCalls<`Name`>>> setPropertyCalls)
        => ExecuteUpdateAsync(x => `P:&& :x.`Name` == `name` ``, setPropertyCalls);
}
#endregion `Name`Dao
T`
