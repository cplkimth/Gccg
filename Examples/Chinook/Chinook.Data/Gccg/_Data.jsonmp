{
	"Version":2,
	"Scope":0,
	"TargetPath":"Data.g.cs",
	"Overwritable": true
}
*** body starts here ***// <auto-generated> This file has been generated by Gccg</auto-generated>

#region usings
using System.ComponentModel;
using System.ComponentModel.DataAnnotations.Schema;
using System.Diagnostics;
using System.Linq.Expressions;
using System.Reflection;
using System.Text;
using System.Text.Json.Serialization;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Query;
using Microsoft.Extensions.Logging;
#endregion

namespace `DataProjectNamespace`;

#region IEntity
public partial interface IEntity
{
}
#endregion IEntity

#region Untyped Entity
public abstract partial class UntypedEntity : IEntity
{
	[NotMapped]
	[JsonIgnore]
	public object EntityTag { get; set; }

	public void Clear()
	{
		Clear(string.Empty, DateTime.Today);
	}

	public void Clear(DateTime defaultDateTime)
	{
		Clear(string.Empty, defaultDateTime);
	}

	public void Clear(string defaultString, DateTime defaultDateTime)
	{
		Type type = GetType();
		PropertyInfo[] propertyInfoArray = type.GetProperties(BindingFlags.Instance | BindingFlags.Public);

		foreach (PropertyInfo propertyInfo in propertyInfoArray)
		{
			if (propertyInfo.CanWrite == false)
				continue;

			if (propertyInfo.PropertyType == typeof (string))
				propertyInfo.SetValue(this, defaultString, null);

			else if (propertyInfo.PropertyType == typeof (DateTime))
				propertyInfo.SetValue(this, defaultDateTime, null);
		}
	}

	[JsonIgnore]
	public abstract string PrimaryKeyValues {get;}

	[JsonIgnore]
	public abstract string EntityText { get; }

	public abstract string GetEntityTypeName();

	partial void IsLogWritable(ref bool? logWritable);

	[JsonIgnore]
	public virtual bool LogWritable
	{
		get
		{
		bool? logWritable = null;
		IsLogWritable(ref logWritable);

		if (logWritable.HasValue)
			return logWritable.Value;

		return false;
		}
	}

	public virtual string ToEntityLog()
	{
		const int MaxLength = 2000; // 최대 2000자 까지만 저장.

		Type type = GetType();

		var propertyInfoes = type.GetProperties();

		StringBuilder builder = new StringBuilder(ToString());

		builder.AppendLine();
		foreach (var propertyInfo in propertyInfoes)
		{
			if (propertyInfo.PropertyType != typeof (int))
				continue;

			if (propertyInfo.Name.EndsWith("Code") == false)
				continue;

			string textPropertyName = propertyInfo.Name.Substring(0, propertyInfo.Name.Length - 4) + "Text";
			string textValue = GetTextFromCodeProperty(this, type, textPropertyName);

			if (textValue != null)
				builder.AppendFormat("[{0}] {1}{2}", textPropertyName, textValue, Environment.NewLine);
		}

		if (builder.Length > MaxLength)
			return builder.ToString(0, MaxLength);
		else
			return builder.ToString();
	}

	private static string GetTextFromCodeProperty(object entity, Type objectType, string textPropertyName)
	{
		var propertyInfo = objectType.GetProperty(textPropertyName);
		object propertyValue = propertyInfo.GetValue(entity, null);

		if (propertyValue is string)
			return (string) propertyValue;
		else
			return null;
	}
	
	public abstract void ClearKeyValues();
}
#endregion Untyped Entity

#region Entity<T>
public abstract partial class Entity<T> : UntypedEntity, IEditableObject where T : class, new()
{
	public abstract T Clone();

	#region Implementation of IEditableObject

	protected T _clone = null;

	public void BeginEdit()
	{
		if (_clone == null)
			_clone = Clone();
	}

	public void EndEdit()
	{
		_clone = null;
	}

	public abstract void CancelEdit();

	#endregion

	protected internal virtual partial void WriteAuditInfo();
}

#endregion Entity<T>

#region PropertyChangedEventArgs
internal class PropertyChangedEventArgs<T> : EventArgs where T : Entity<T>, new()
{
	/// <summary>
	/// 속성 값이 변경된 엔티티
	/// </summary>
	public T Entity { get; set; }

	public PropertyChangedEventArgs(T entity)
	{
		Entity = entity;
	}
}

internal class PropertyChangingEventArgs<T, K> : EventArgs where T : Entity<T>, new()
{
	public T Entity { get; set; }

	public K Value { get; set; }

	public PropertyChangingEventArgs(T entity, K value)
	{
		Entity = entity;
		Value = value;
	}
}
#endregion PropertyChangedEventArgs

#region Types
public enum LogType
{
	/// <summary>
	/// 엔티티 삽입
	/// </summary>
	Insert,
	/// <summary>
	/// 엔티티 갱신
	/// </summary>
	Update,
	/// <summary>
	/// 엔티티 삭제
	/// </summary>
	Delete
}
#endregion LogType

#region Dao
public partial class DaoBase
{
}

public partial class Dao : DaoBase
{
	static Dao()
	{
		`T `Name` = new `Name`Dao(); T`
	}

	#region Data objects
	`T public static `Name`Dao `Name` { get; } T`
	#endregion

	public static EntityDao<T> Get<T>() where T : Entity<T>, new()
    {
        object result = typeof(T).Name switch
        {
            `T "`Name`" => `Name`, T`
			_ => throw new NotImplementedException("Dao.Get")
        };

        return result as EntityDao<T>;
    }
}
#endregion

#region `DbContextName`LoggerFactory
internal class `DbContextName`LoggerFactory : LoggerFactory
{
    #region singleton
    private static `DbContextName`LoggerFactory _instance;

    public static `DbContextName`LoggerFactory GetInstance(params LogPath[] loggerTypes) => GetInstance(loggerTypes.Select(x => x.ToString()).ToArray());

    public static `DbContextName`LoggerFactory GetInstance(params string[] logPathes)
    {
        if (_instance == null)
        {
            List<ILoggerProvider> logProviders = new List<ILoggerProvider>(logPathes.Select(x => new LogProvider(x)));
            _instance = new `DbContextName`LoggerFactory(logProviders);
        }

        return _instance;
    }

    private `DbContextName`LoggerFactory(List<ILoggerProvider> providers) : base(providers)
    {
    }

    #endregion singleton

    internal class LogProvider : ILoggerProvider
    {
        public LogProvider(string logPath) => _logPath = logPath;

        private string _logPath;

        public void Dispose()
        {
        }

        public ILogger CreateLogger(string categoryName)
        {
            return new Logger(categoryName, _logPath);
        }
    }

    internal class Logger : ILogger
    {
        private readonly IWriter _writer;

        private readonly string _categoryName;

        public Logger(string categoryName, string logPath)
        {
            _categoryName = categoryName;

            _writer = logPath switch
            {
                nameof(LogPath.Console) => new ConsoleWriter(),
                nameof(LogPath.Debug) => new DebugWriter(),
                _ => new FileWriter(logPath),
            };

            if (_counters.ContainsKey(_writer.UniqueName) is false)
                _counters.TryAdd(_writer.UniqueName, 0);
        }

        private static System.Collections.Concurrent.ConcurrentDictionary<string, int> _counters = new();

        public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter)
        {
            _writer.Open();
            _writer.WriteLine($"[{_counters[_writer.UniqueName]++:N0}] {DateTime.Now:s}");
            _writer.WriteLine(formatter(state, exception));
            _writer.WriteLine("--------------------------------------------------");
            _writer.WriteLine(Environment.NewLine);
            _writer.Save();
        }

        public bool IsEnabled(LogLevel logLevel)
        {
            return logLevel == LogLevel.Information &&
                    _categoryName == DbLoggerCategory.Database.Command.Name;
        }

        public IDisposable BeginScope<TState>(TState state)
        {
            return null;
        }
    }

    public interface IWriter
    {
        string UniqueName { get; }

        void WriteLine(string format, params object[] args);

        void Open()
        {
        }

        void Save()
        {
        }
    }

    internal class ConsoleWriter : IWriter
    {
        public string UniqueName => nameof(ConsoleWriter);

        public void WriteLine(string format, params object[] args) => Console.WriteLine(format, args);
    }

    internal class DebugWriter : IWriter
    {
        public string UniqueName => nameof(DebugWriter);

        public void WriteLine(string format, params object[] args) => Debug.WriteLine(format, args);
    }

    internal class FileWriter : IWriter
    {
        private readonly string _logFilePath;

        public string UniqueName => _logFilePath;

        public FileWriter(string logFilePath)
        {
            _logFilePath = logFilePath;
        }

        private readonly StringBuilder _builder = new StringBuilder();

        public void WriteLine(string format, params object[] args)
        {
            _builder.AppendFormat(format, args);
            _builder.AppendLine();
        }

        public void Open()
        {
            _builder.Clear();
        }

        public void Save()
        {
            File.AppendAllText(_logFilePath, _builder.ToString());
        }
    }
}

internal enum LogPath
{
    /// <summary>
    /// 콘솔에 출력
    /// </summary>
    Console,
    /// <summary>
    /// 디버거 창에 출력
    /// </summary>
    Debug,
}
#endregion `DbContextName`LoggerFactory

#region Entities
`T #region `Name`
public partial class `Name` : Entity<`Name`>, IEntity
{
	public const string EntityTypeName = "`Name`";

	public static void Copy(`Name` source, `Name` target)
	{
		`A:[T][T][N]:target.`Name` = source.`Name`; ``
	}

	public override `Name` Clone()
	{
		var clone = new `Name`();

		Copy(this, clone);

		return clone;
	}
	partial void GetEntityTextCore(ref string value);

	[JsonIgnore]
	public override string EntityText
	{
		get 
		{ 
			string value = null;
			GetEntityTextCore(ref value);

			if (value != null)
				return value;

			return PrimaryKeyValues; 
		}
	}

	partial void ToStringCore(ref string value);

	public override string ToString()
	{
		string value = null;
		ToStringCore(ref value);

		if (value != null)
			return value;

		return `A: + ", " + :"[`Name`]" + `Name` ``;
	}

	public override void CancelEdit()
	{
		if (_clone != null)
			Copy(_clone, this);
	}

	[JsonIgnore]
	public override string PrimaryKeyValues
	{
		get { return string.Join(":", `P:, :`Name` ``); }
	}

	public override string GetEntityTypeName()
	{
		return EntityTypeName;
	}

    partial void ClearKeyValuesCore(ref bool handled);

	public override void ClearKeyValues()
	{
        bool handled = false;
		ClearKeyValuesCore(ref handled);
		if (handled)
			return;

		`P:[N]:`Name` = default;``
	}
}

public enum `Name`Column
{
	`A:,[N]:`Name` ``
}

public class `Name`EqualityComparer : IEqualityComparer<`Name`>
{
    #region singleton
    private static readonly Lazy<`Name`EqualityComparer> _instance = new(() => new `Name`EqualityComparer());

    public static `Name`EqualityComparer Instance => _instance.Value;

    private `Name`EqualityComparer()
    {
    }
    #endregion singleton

	public bool Equals(`Name` x, `Name` y)
	{
		return `P: && :x.`Name` == y.`Name` ``;
	}

	public int GetHashCode(`Name` obj)
	{
		return `P: ^ :obj.`Name`.GetHashCode() ``;
	}
}
#endregion `Name`
T`
#endregion Entities

#region EntityDao<T>
public abstract partial class EntityDao<T> where T : Entity<T>, new()
{
	internal EntityDao() { }

	#region Create
	public virtual T Create()
	{
		return Create(string.Empty, DateTime.Today);
	}

	public virtual T Create(DateTime defaultDateTime)
	{
		return Create(string.Empty, defaultDateTime);
	}

	public virtual T Create(string defaultString, DateTime defaultDateTime)
	{
		T entity = new T();
		entity.Clear(defaultString, defaultDateTime);

		return entity;
	}
	#endregion Create

	protected abstract Expression<Func<T, bool>> HasSameKey(T other);

	#region Write log partial methods
	protected virtual partial void OnSaving(T entity, LogType logType);

	protected virtual partial void OnSaved(T entity, LogType logType);
	#endregion Write log partial methods

    private IQueryable<T> MakeCountQuery(Expression<Func<T, bool>> where, DbContext context)
    {
        var query = from item in context.Set<T>()
            select item;

        if (where != null)
            query = query.Where(where);

        return query;
    }

	private static IQueryable<T> GetListCore<O>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, bool ascending, int startRowIndex, int maximumRows, DbContext context)
	{
		var query = from x in context.Set<T>()
					select x;

		if (where != null)
			query = query.Where(where);

		IOrderedQueryable<T> orderedQuery = null;

		if (orderBy != null)
			orderedQuery = (ascending) ? query.OrderBy(orderBy) : query.OrderByDescending(orderBy);

		if (startRowIndex != 0 || maximumRows != int.MaxValue)
		{
			if (orderedQuery != null)
				orderedQuery = (IOrderedQueryable<T>)orderedQuery.Skip(startRowIndex).Take(maximumRows);
			else
				query = query.Skip(startRowIndex).Take(maximumRows);
		}

		return orderedQuery ?? query;
	}

    private static IQueryable<T> GetScalarCore<O>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, bool ascending, DbContext context)
	{
		var query = from x in context.Set<T>()
					select x;

		if (where != null)
			query = query.Where(where);

        // 마지막 행은 orderby가 반드시 지정되어 있어야 함. orderby를 지정하지 않으면 skip 메서드를 사용할 수 없기 때문.
        if (orderBy != null)
			query = @ascending ? query.OrderBy(orderBy) : query.OrderByDescending(orderBy);

        return query;
	}

    internal virtual void MarkToSave(DbContext context, LogType logType, T entity)
    {
        OnSaving(entity, logType);

        context.Entry(entity).State = logType switch
        {
            LogType.Insert => EntityState.Added,
            LogType.Update => EntityState.Modified,
            LogType.Delete => EntityState.Deleted,
			_ => throw new ArgumentOutOfRangeException(nameof(logType), logType, null)
        };
    }
}
#endregion EntityDao<T>

#region Derived Daos
`T 
public partial class `Name`Dao : EntityDao<`Name`>
{
    internal `Name`Dao() {}

	protected override Expression<Func<`Name`, bool>> HasSameKey(`Name` other)
	{
        return x => `P: &&:x.`Name` == other.`Name` ``;
	}

	`F::
	private IQueryable<`Table`> GetBy`Name`Core(DbContext context, `Type` `name`)
    {
        return context.Set<`Table`>().Where(x => x.`Name` == `name`);
    }
	``
}
T`
#endregion Derived Daos