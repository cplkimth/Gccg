// <auto-generated> This file has been generated by Gccg</auto-generated>

#region usings
using System.ComponentModel;
using System.ComponentModel.DataAnnotations.Schema;
using System.Diagnostics;
using System.Linq.Expressions;
using System.Reflection;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Query;
using Microsoft.Extensions.Logging;
using Chinook.Data;

#endregion

namespace Chinook.Data;

#region EntityDao<T>
public abstract partial class EntityDao<T> where T : Entity<T>, new()
{
    #region GetAsync
    public virtual async Task<List<T>> GetAsync(CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore<T>(null, null, true, 0, int.MaxValue, context).ToListAsync(ctk);
    }

    public virtual async Task<T[]> GetAsArrayAsync(CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore<T>(null, null, true, 0, int.MaxValue, context).ToArrayAsync(ctk);
    }

    public virtual async Task<HashSet<T>> GetAsHashSetAsync(CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore<T>(null, null, true, 0, int.MaxValue, context).ToHashSetAsync(ctk);
    }

    public virtual async Task<Dictionary<K, T>> GetAsDictionaryAsync<K>(Func<T, K> keySelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore<T>(null, null, true, 0, int.MaxValue, context).ToDictionaryAsync(keySelector, ctk);
    }

    public virtual async Task<Dictionary<K, E>> GetAsDictionaryAsync<K, E>(Func<T, K> keySelector, Func<T, E> elementSelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore<T>(null, null, true, 0, int.MaxValue, context).ToDictionaryAsync(keySelector, elementSelector, ctk);
    }

    public virtual async Task<List<T>> GetAsync(Expression<Func<T, bool>> where, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore<T>(where, null, true, 0, int.MaxValue, context).ToListAsync(ctk);
    }

    public virtual async Task<T[]> GetAsArrayAsync(Expression<Func<T, bool>> where, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore<T>(where, null, true, 0, int.MaxValue, context).ToArrayAsync(ctk);
    }

    public virtual async Task<HashSet<T>> GetAsHashSetAsync(Expression<Func<T, bool>> where, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore<T>(where, null, true, 0, int.MaxValue, context).ToHashSetAsync(ctk);
    }

    public virtual async Task<Dictionary<K, T>> GetAsDictionaryAsync<K>(
        Expression<Func<T, bool>> where, Func<T, K> keySelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore<T>(where, null, true, 0, int.MaxValue, context).ToDictionaryAsync(keySelector, ctk);
    }

    public virtual async Task<Dictionary<K, E>> GetAsDictionaryAsync<K, E>(
        Expression<Func<T, bool>> where, Func<T, K> keySelector, Func<T, E> elementSelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore<T>(where, null, true, 0, int.MaxValue, context).ToDictionaryAsync(keySelector, elementSelector, ctk);
    }

    public virtual async Task<List<T>> GetAsync<O>(Expression<Func<T, O>> orderBy, bool ascending, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore(null, orderBy, ascending, 0, int.MaxValue, context).ToListAsync(ctk);
    }

    public virtual async Task<T[]> GetAsArrayAsync<O>(Expression<Func<T, O>> orderBy, bool ascending, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore(null, orderBy, ascending, 0, int.MaxValue, context).ToArrayAsync(ctk);
    }

    public virtual async Task<List<T>> GetAsync<O>(Expression<Func<T, O>> orderBy, bool ascending, int startRowIndex, int maximumRows, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore(null, orderBy, ascending, startRowIndex, maximumRows, context).ToListAsync(ctk);
    }
    
    public virtual async Task<T[]> GetAsArrayAsync<O>(Expression<Func<T, O>> orderBy, bool ascending, int startRowIndex, int maximumRows, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore(null, orderBy, ascending, startRowIndex, maximumRows, context).ToArrayAsync(ctk);
    }

    public virtual async Task<List<T>> GetAsync<O>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, bool ascending, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore(where, orderBy, ascending, 0, int.MaxValue, context).ToListAsync(ctk);
    }

    public virtual async Task<T[]> GetAsArrayAsync<O>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, bool ascending, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore(where, orderBy, ascending, 0, int.MaxValue, context).ToArrayAsync(ctk);
    }

    public virtual async Task<List<T>> GetAsync<O>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, bool ascending, int startRowIndex, int maximumRows, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore(where, orderBy, ascending, startRowIndex, maximumRows, context).ToListAsync(ctk);
    }
    
    public virtual async Task<T[]> GetAsArrayAsync<O>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, bool ascending, int startRowIndex, int maximumRows, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetListCore(where, orderBy, ascending, startRowIndex, maximumRows, context).ToArrayAsync(ctk);
    }
    #endregion GetAsync

	#region SelectAsync
    public virtual async Task<List<S>> SelectAsync<S>(Expression<Func<T, S>> select,
        CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore<T>(null, null, true, 0, int.MaxValue, context);
        return await query.Select(select).ToListAsync(ctk);
    }

    public virtual async Task<S[]> SelectAsArrayAsync<S>(Expression<Func<T, S>> select, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore<T>(null, null, true, 0, int.MaxValue, context);
        return await query.Select(select).ToArrayAsync(ctk);
    }

    public virtual async Task<HashSet<S>> SelectAsHashSetAsync<S>(Expression<Func<T, S>> select, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore<T>(null, null, true, 0, int.MaxValue, context);
        return await query.Select(select).ToHashSetAsync(ctk);
    }

    public virtual async Task<List<S>> SelectAsync<S>(Expression<Func<T, bool>> where, Expression<Func<T, S>> select, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore<T>(where, null, true, 0, int.MaxValue, context);
        return await query.Select(select).ToListAsync(ctk);
    }

    public virtual async Task<S[]> SelectAsArrayAsync<S>(Expression<Func<T, bool>> where, Expression<Func<T, S>> select, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore<T>(where, null, true, 0, int.MaxValue, context);
        return await query.Select(select).ToArrayAsync(ctk);
    }

    public virtual async Task<HashSet<S>> SelectAsHashSetAsync<S>(Expression<Func<T, bool>> where, Expression<Func<T, S>> select, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore<T>(where, null, true, 0, int.MaxValue, context);
        return await query.Select(select).ToHashSetAsync(ctk);
    }

    public virtual async Task<List<S>> SelectAsync<O, S>(Expression<Func<T, O>> orderBy, bool ascending, Expression<Func<T, S>> select, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore(null, orderBy, ascending, 0, int.MaxValue, context);
        return await query.Select(select).ToListAsync(ctk);
    }

    public virtual async Task<S[]> SelectAsArrayAsync<O, S>(Expression<Func<T, O>> orderBy, bool ascending, Expression<Func<T, S>> select, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore(null, orderBy, ascending, 0, int.MaxValue, context);
        return await query.Select(select).ToArrayAsync(ctk);
    }

    public virtual async Task<List<S>> SelectAsync<O, S>(Expression<Func<T, O>> orderBy, bool ascending, int startRowIndex, int maximumRows, Expression<Func<T, S>> select, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore(null, orderBy, ascending, startRowIndex, maximumRows, context);
        return await query.Select(select).ToListAsync(ctk);
    }

    public virtual async Task<S[]> SelectAsArrayAsync<O, S>(Expression<Func<T, O>> orderBy, bool ascending, int startRowIndex, int maximumRows, Expression<Func<T, S>> select, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore(null, orderBy, ascending, startRowIndex, maximumRows, context);
        return await query.Select(select).ToArrayAsync(ctk);
    }

    public virtual async Task<List<S>> SelectAsync<O, S>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, bool ascending, Expression<Func<T, S>> select, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore(where, orderBy, ascending, 0, int.MaxValue, context);
        return await query.Select(select).ToListAsync(ctk);
    }

    public virtual async Task<S[]> SelectAsArrayAsync<O, S>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, bool ascending, Expression<Func<T, S>> select, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore(where, orderBy, ascending, 0, int.MaxValue, context);
        return await query.Select(select).ToArrayAsync(ctk);
    }

    public virtual async Task<List<S>> SelectAsync<O, S>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, bool ascending, int startRowIndex, int maximumRows, Expression<Func<T, S>> select, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore(where, orderBy, ascending, startRowIndex, maximumRows, context);
        return await query.Select(select).ToListAsync(ctk);
    }

    public virtual async Task<S[]> SelectAsArrayAsync<O, S>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, bool ascending, int startRowIndex, int maximumRows, Expression<Func<T, S>> select, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = GetListCore(where, orderBy, ascending, startRowIndex, maximumRows, context);
        return await query.Select(select).ToArrayAsync(ctk);
    }
	#endregion SelectAsync

	#region GetFirstAsync / GetLastAsync
    public virtual Task<T> GetFirstAsync(CancellationToken ctk = default)
        => GetScalar<T>(null, null, true, ctk);

    public virtual Task<T> GetFirstAsync(Expression<Func<T, bool>> where, CancellationToken ctk = default) 
        => GetScalar<T>(where, null, true, ctk);

    public virtual Task<T> GetFirstAsync<O>(Expression<Func<T, O>> orderBy, CancellationToken ctk = default)
        => GetScalar<O>(null, orderBy, true, ctk);

    public virtual Task<T> GetFirstAsync<O>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, CancellationToken ctk = default)
        => GetScalar(where, orderBy, true, ctk);

	private async Task<T> GetScalar<O>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, bool ascending, CancellationToken ctk)
	{
        await using var context = DbContextFactory.Create();

	    return await GetScalarCore(where, orderBy, ascending, context).FirstOrDefaultAsync(ctk);
	}

    public virtual Task<T> GetLastAsync<O>(Expression<Func<T, O>> orderBy, CancellationToken ctk = default)
        => GetScalar(null, orderBy, false, ctk);

    public virtual Task<T> GetLastAsync<O>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, CancellationToken ctk = default)
        => GetScalar(where, orderBy, false, ctk);
	#endregion GetFirstAsync / GetLastAsync

	#region SelectFirstAsync / SelectLastAsync
    public virtual Task<S> SelectFirstAsync<S>(Expression<Func<T, S>> select, CancellationToken ctk = default)
        => SelectScalar<T, S>(null, null, select, false, ctk);

    public virtual Task<S> SelectFirstAsync<S>(Expression<Func<T, bool>> where, Expression<Func<T, S>> select, CancellationToken ctk = default)
        => SelectScalar<T, S>(where, null, select, false, ctk);

    public virtual Task<S> SelectFirstAsync<O, S>(Expression<Func<T, O>> orderBy, Expression<Func<T, S>> select, CancellationToken ctk = default)
        => SelectScalar(null, orderBy, select, true, ctk);

    public virtual Task<S> SelectFirstAsync<O, S>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, Expression<Func<T, S>> select, CancellationToken ctk = default)
        => SelectScalar(where, orderBy, select, true, ctk);

    private async Task<S> SelectScalar<O, S>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, Expression<Func<T, S>> select, bool ascending, CancellationToken ctk)
	{
        await using var context = DbContextFactory.Create();

		var query = GetScalarCore(where, orderBy, ascending, context);
		return await query.Select(select).FirstOrDefaultAsync();
	}

    public virtual Task<S> SelectLastAsync<O, S>(Expression<Func<T, O>> orderBy, Expression<Func<T, S>> select, CancellationToken ctk = default)
        => SelectScalar(null, orderBy, select, false, ctk);

    public virtual Task<S> SelectLastAsync<O, S>(Expression<Func<T, bool>> where, Expression<Func<T, O>> orderBy, Expression<Func<T, S>> select, CancellationToken ctk = default)
        => SelectScalar(where, orderBy, select, false, ctk);
    #endregion SelectFirstAsync / SelectLastAsync

	#region GetCountAsync
    public virtual Task<int> GetCountAsync(CancellationToken ctk = default)
        => GetCountAsync(null);

    public virtual async Task<int> GetCountAsync(Expression<Func<T, bool>> where, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = MakeCountQuery(where, context);
        return await query.CountAsync(ctk);
    }

	#endregion GetCountAsync

	#region ExistAsync
    public virtual async Task<bool> ExistsAsync(Expression<Func<T, bool>> where, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        var query = MakeCountQuery(where, context);
        return await query.AnyAsync();
    }
	#endregion ExistAsync

	#region InsertAsync / UpdateAsync / DeleteAsync
    
    internal async Task<(int Count, T Entity)> SaveChanges(LogType logType, CancellationToken ctk, params IEnumerable<T> entities)
	{
        await using var context = DbContextFactory.Create();

        foreach (var entity in entities)
    		MarkToSave(context, logType, entity);
			
		int count = await context.SaveChangesAsync(ctk);
		if (count > 0)
            foreach (var entity in entities)
    			OnSaved(entity, logType);

        return (count, count > 0 ? entities.First() : null);
	}

	public virtual async Task<T> InsertAsync(T entity, CancellationToken ctk = default)
        => (await SaveChanges(LogType.Insert, ctk, entity)).Entity;

	public virtual async Task<int> InsertManyAsync(IEnumerable<T> entities, CancellationToken ctk = default)
        => (await SaveChanges(LogType.Insert, ctk, entities)).Count;

	public virtual async Task<int> UpdateAsync(T entity, CancellationToken ctk = default) 
        => (await SaveChanges(LogType.Update, ctk, entity)).Count;

	public virtual async Task<int> UpdateManyAsync(IEnumerable<T> entities, CancellationToken ctk = default) 
        => (await SaveChanges(LogType.Update, ctk, entities)).Count;

	public virtual async Task<int> DeleteAsync(T entity, CancellationToken ctk = default) 
        => (await SaveChanges(LogType.Delete, ctk, entity)).Count;

	public virtual async Task<int> DeleteManyAsync(IEnumerable<T> entities, CancellationToken ctk = default) 
        => (await SaveChanges(LogType.Delete, ctk, entities)).Count;

	public virtual async Task<int> DeleteAllAsync(Expression<Func<T, bool>> where, CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

		var entities = await GetAsync(where);

        return await DeleteManyAsync(entities, ctk);
	}

    public virtual async Task<T> InsertIfNotExistAsync(T entity, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        int count = await context.Set<T>().CountAsync(HasSameKey(entity), ctk);
        if (count > 0)
            return null;

        return await InsertAsync(entity, ctk);
    }

    public virtual async Task<bool> InsertOrUpdateAsync(T entity, bool withAudit = false, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        int count = await context.Set<T>().CountAsync(HasSameKey(entity), ctk);
        if (count > 0)
        {
            await UpdateAsync(entity, ctk);
            return false;
        }
        else
        {
            await InsertAsync(entity, ctk);
            return true;
        }
    }	
	#endregion InsertAsync / UpdateAsync / DeleteAsync

    #region ExecuteUpdateAsync / ExecuteDeleteAsync
    public async Task<int> ExecuteUpdateAsync(Expression<Func<T, bool>> predicate, Expression<Func<SetPropertyCalls<T>, SetPropertyCalls<T>>> setPropertyCalls, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await context.Set<T>().Where(predicate).ExecuteUpdateAsync(setPropertyCalls, ctk);
    }

    public async Task<int> ExecuteDeleteAsync(Expression<Func<T, bool>> predicate, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await context.Set<T>().Where(predicate).ExecuteDeleteAsync(ctk);
    }
    #endregion ExecuteUpdateAsync / ExecuteDeleteAsync
}
#endregion EntityDao<T>

 #region AlbumDao
public partial class AlbumDao
{
	public async Task<Album> GetByKeyAsync(int albumId , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

        return await context.Set<Album>().FirstOrDefaultAsync(x =>  x.AlbumId == albumId , ctk);
	}

	public async Task<bool> ExistsByKeyAsync(int albumId , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

		return await context.Set<Album>().CountAsync(x =>  x.AlbumId == albumId , ctk) > 0;
	}

	public async Task<int> DeleteByKeyAsync(int albumId , CancellationToken ctk = default)
	{
        var entity = await GetByKeyAsync(albumId , ctk);

        if (entity == null)
            return 0;

        return await DeleteAsync(entity, ctk);
	}
	
	
	#region GetByArtistId
    public async Task<List<Album>> GetByArtistIdAsync(int artistId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByArtistIdCore(context, artistId).ToListAsync(ctk);
    }
    
    public async Task<Album[]> GetByArtistIdAsArrayAsync(int artistId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByArtistIdCore(context, artistId).ToArrayAsync(ctk);
    }
    
    public async Task<HashSet<Album>> GetByArtistIdAsHastSetAsync(int artistId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByArtistIdCore(context, artistId).ToHashSetAsync(ctk);
    }
    
    public async Task<Dictionary<K, Album>> GetByArtistIdAsDictionaryAsync<K>(int artistId, Func<Album, K> keySelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByArtistIdCore(context, artistId).ToDictionaryAsync(keySelector, ctk);
    }
    
    public async Task<Dictionary<K, E>> GetByArtistIdAsDictionaryAsync<K, E>(int artistId, Func<Album, K> keySelector,Func<Album, E> elementSelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByArtistIdCore(context, artistId).ToDictionaryAsync(keySelector, elementSelector, ctk);
    }
    #endregion
    

    public Task<int> ExecuteDeleteByKeyAsync(int albumId )
        => ExecuteDeleteAsync(x => x.AlbumId == albumId );

    public Task<int> ExecuteUpdateByKeyAsync(int albumId , Expression<Func<SetPropertyCalls<Album>, SetPropertyCalls<Album>>> setPropertyCalls)
        => ExecuteUpdateAsync(x => x.AlbumId == albumId , setPropertyCalls);
}
#endregion AlbumDao

 #region ArtistDao
public partial class ArtistDao
{
	public async Task<Artist> GetByKeyAsync(int artistId , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

        return await context.Set<Artist>().FirstOrDefaultAsync(x =>  x.ArtistId == artistId , ctk);
	}

	public async Task<bool> ExistsByKeyAsync(int artistId , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

		return await context.Set<Artist>().CountAsync(x =>  x.ArtistId == artistId , ctk) > 0;
	}

	public async Task<int> DeleteByKeyAsync(int artistId , CancellationToken ctk = default)
	{
        var entity = await GetByKeyAsync(artistId , ctk);

        if (entity == null)
            return 0;

        return await DeleteAsync(entity, ctk);
	}
	
	

    public Task<int> ExecuteDeleteByKeyAsync(int artistId )
        => ExecuteDeleteAsync(x => x.ArtistId == artistId );

    public Task<int> ExecuteUpdateByKeyAsync(int artistId , Expression<Func<SetPropertyCalls<Artist>, SetPropertyCalls<Artist>>> setPropertyCalls)
        => ExecuteUpdateAsync(x => x.ArtistId == artistId , setPropertyCalls);
}
#endregion ArtistDao

 #region CodeDao
public partial class CodeDao
{
	public async Task<Code> GetByKeyAsync(int codeId , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

        return await context.Set<Code>().FirstOrDefaultAsync(x =>  x.CodeId == codeId , ctk);
	}

	public async Task<bool> ExistsByKeyAsync(int codeId , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

		return await context.Set<Code>().CountAsync(x =>  x.CodeId == codeId , ctk) > 0;
	}

	public async Task<int> DeleteByKeyAsync(int codeId , CancellationToken ctk = default)
	{
        var entity = await GetByKeyAsync(codeId , ctk);

        if (entity == null)
            return 0;

        return await DeleteAsync(entity, ctk);
	}
	
	
	#region GetByCodeCategoryId
    public async Task<List<Code>> GetByCodeCategoryIdAsync(int codeCategoryId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByCodeCategoryIdCore(context, codeCategoryId).ToListAsync(ctk);
    }
    
    public async Task<Code[]> GetByCodeCategoryIdAsArrayAsync(int codeCategoryId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByCodeCategoryIdCore(context, codeCategoryId).ToArrayAsync(ctk);
    }
    
    public async Task<HashSet<Code>> GetByCodeCategoryIdAsHastSetAsync(int codeCategoryId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByCodeCategoryIdCore(context, codeCategoryId).ToHashSetAsync(ctk);
    }
    
    public async Task<Dictionary<K, Code>> GetByCodeCategoryIdAsDictionaryAsync<K>(int codeCategoryId, Func<Code, K> keySelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByCodeCategoryIdCore(context, codeCategoryId).ToDictionaryAsync(keySelector, ctk);
    }
    
    public async Task<Dictionary<K, E>> GetByCodeCategoryIdAsDictionaryAsync<K, E>(int codeCategoryId, Func<Code, K> keySelector,Func<Code, E> elementSelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByCodeCategoryIdCore(context, codeCategoryId).ToDictionaryAsync(keySelector, elementSelector, ctk);
    }
    #endregion
    

    public Task<int> ExecuteDeleteByKeyAsync(int codeId )
        => ExecuteDeleteAsync(x => x.CodeId == codeId );

    public Task<int> ExecuteUpdateByKeyAsync(int codeId , Expression<Func<SetPropertyCalls<Code>, SetPropertyCalls<Code>>> setPropertyCalls)
        => ExecuteUpdateAsync(x => x.CodeId == codeId , setPropertyCalls);
}
#endregion CodeDao

 #region CodeCategoryDao
public partial class CodeCategoryDao
{
	public async Task<CodeCategory> GetByKeyAsync(int codeCategoryId , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

        return await context.Set<CodeCategory>().FirstOrDefaultAsync(x =>  x.CodeCategoryId == codeCategoryId , ctk);
	}

	public async Task<bool> ExistsByKeyAsync(int codeCategoryId , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

		return await context.Set<CodeCategory>().CountAsync(x =>  x.CodeCategoryId == codeCategoryId , ctk) > 0;
	}

	public async Task<int> DeleteByKeyAsync(int codeCategoryId , CancellationToken ctk = default)
	{
        var entity = await GetByKeyAsync(codeCategoryId , ctk);

        if (entity == null)
            return 0;

        return await DeleteAsync(entity, ctk);
	}
	
	

    public Task<int> ExecuteDeleteByKeyAsync(int codeCategoryId )
        => ExecuteDeleteAsync(x => x.CodeCategoryId == codeCategoryId );

    public Task<int> ExecuteUpdateByKeyAsync(int codeCategoryId , Expression<Func<SetPropertyCalls<CodeCategory>, SetPropertyCalls<CodeCategory>>> setPropertyCalls)
        => ExecuteUpdateAsync(x => x.CodeCategoryId == codeCategoryId , setPropertyCalls);
}
#endregion CodeCategoryDao

 #region CustomerDao
public partial class CustomerDao
{
	public async Task<Customer> GetByKeyAsync(int customerId , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

        return await context.Set<Customer>().FirstOrDefaultAsync(x =>  x.CustomerId == customerId , ctk);
	}

	public async Task<bool> ExistsByKeyAsync(int customerId , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

		return await context.Set<Customer>().CountAsync(x =>  x.CustomerId == customerId , ctk) > 0;
	}

	public async Task<int> DeleteByKeyAsync(int customerId , CancellationToken ctk = default)
	{
        var entity = await GetByKeyAsync(customerId , ctk);

        if (entity == null)
            return 0;

        return await DeleteAsync(entity, ctk);
	}
	
	
	#region GetBySupportRepId
    public async Task<List<Customer>> GetBySupportRepIdAsync(int? supportRepId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetBySupportRepIdCore(context, supportRepId).ToListAsync(ctk);
    }
    
    public async Task<Customer[]> GetBySupportRepIdAsArrayAsync(int? supportRepId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetBySupportRepIdCore(context, supportRepId).ToArrayAsync(ctk);
    }
    
    public async Task<HashSet<Customer>> GetBySupportRepIdAsHastSetAsync(int? supportRepId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetBySupportRepIdCore(context, supportRepId).ToHashSetAsync(ctk);
    }
    
    public async Task<Dictionary<K, Customer>> GetBySupportRepIdAsDictionaryAsync<K>(int? supportRepId, Func<Customer, K> keySelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetBySupportRepIdCore(context, supportRepId).ToDictionaryAsync(keySelector, ctk);
    }
    
    public async Task<Dictionary<K, E>> GetBySupportRepIdAsDictionaryAsync<K, E>(int? supportRepId, Func<Customer, K> keySelector,Func<Customer, E> elementSelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetBySupportRepIdCore(context, supportRepId).ToDictionaryAsync(keySelector, elementSelector, ctk);
    }
    #endregion
    

    public Task<int> ExecuteDeleteByKeyAsync(int customerId )
        => ExecuteDeleteAsync(x => x.CustomerId == customerId );

    public Task<int> ExecuteUpdateByKeyAsync(int customerId , Expression<Func<SetPropertyCalls<Customer>, SetPropertyCalls<Customer>>> setPropertyCalls)
        => ExecuteUpdateAsync(x => x.CustomerId == customerId , setPropertyCalls);
}
#endregion CustomerDao

 #region DateTableDao
public partial class DateTableDao
{
	public async Task<DateTable> GetByKeyAsync(DateOnly date , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

        return await context.Set<DateTable>().FirstOrDefaultAsync(x =>  x.Date == date , ctk);
	}

	public async Task<bool> ExistsByKeyAsync(DateOnly date , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

		return await context.Set<DateTable>().CountAsync(x =>  x.Date == date , ctk) > 0;
	}

	public async Task<int> DeleteByKeyAsync(DateOnly date , CancellationToken ctk = default)
	{
        var entity = await GetByKeyAsync(date , ctk);

        if (entity == null)
            return 0;

        return await DeleteAsync(entity, ctk);
	}
	
	

    public Task<int> ExecuteDeleteByKeyAsync(DateOnly date )
        => ExecuteDeleteAsync(x => x.Date == date );

    public Task<int> ExecuteUpdateByKeyAsync(DateOnly date , Expression<Func<SetPropertyCalls<DateTable>, SetPropertyCalls<DateTable>>> setPropertyCalls)
        => ExecuteUpdateAsync(x => x.Date == date , setPropertyCalls);
}
#endregion DateTableDao

 #region EmployeeDao
public partial class EmployeeDao
{
	public async Task<Employee> GetByKeyAsync(int employeeId , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

        return await context.Set<Employee>().FirstOrDefaultAsync(x =>  x.EmployeeId == employeeId , ctk);
	}

	public async Task<bool> ExistsByKeyAsync(int employeeId , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

		return await context.Set<Employee>().CountAsync(x =>  x.EmployeeId == employeeId , ctk) > 0;
	}

	public async Task<int> DeleteByKeyAsync(int employeeId , CancellationToken ctk = default)
	{
        var entity = await GetByKeyAsync(employeeId , ctk);

        if (entity == null)
            return 0;

        return await DeleteAsync(entity, ctk);
	}
	
	
	#region GetByReportsTo
    public async Task<List<Employee>> GetByReportsToAsync(int? reportsTo, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByReportsToCore(context, reportsTo).ToListAsync(ctk);
    }
    
    public async Task<Employee[]> GetByReportsToAsArrayAsync(int? reportsTo, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByReportsToCore(context, reportsTo).ToArrayAsync(ctk);
    }
    
    public async Task<HashSet<Employee>> GetByReportsToAsHastSetAsync(int? reportsTo, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByReportsToCore(context, reportsTo).ToHashSetAsync(ctk);
    }
    
    public async Task<Dictionary<K, Employee>> GetByReportsToAsDictionaryAsync<K>(int? reportsTo, Func<Employee, K> keySelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByReportsToCore(context, reportsTo).ToDictionaryAsync(keySelector, ctk);
    }
    
    public async Task<Dictionary<K, E>> GetByReportsToAsDictionaryAsync<K, E>(int? reportsTo, Func<Employee, K> keySelector,Func<Employee, E> elementSelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByReportsToCore(context, reportsTo).ToDictionaryAsync(keySelector, elementSelector, ctk);
    }
    #endregion
    

    public Task<int> ExecuteDeleteByKeyAsync(int employeeId )
        => ExecuteDeleteAsync(x => x.EmployeeId == employeeId );

    public Task<int> ExecuteUpdateByKeyAsync(int employeeId , Expression<Func<SetPropertyCalls<Employee>, SetPropertyCalls<Employee>>> setPropertyCalls)
        => ExecuteUpdateAsync(x => x.EmployeeId == employeeId , setPropertyCalls);
}
#endregion EmployeeDao

 #region GenreDao
public partial class GenreDao
{
	public async Task<Genre> GetByKeyAsync(int genreId , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

        return await context.Set<Genre>().FirstOrDefaultAsync(x =>  x.GenreId == genreId , ctk);
	}

	public async Task<bool> ExistsByKeyAsync(int genreId , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

		return await context.Set<Genre>().CountAsync(x =>  x.GenreId == genreId , ctk) > 0;
	}

	public async Task<int> DeleteByKeyAsync(int genreId , CancellationToken ctk = default)
	{
        var entity = await GetByKeyAsync(genreId , ctk);

        if (entity == null)
            return 0;

        return await DeleteAsync(entity, ctk);
	}
	
	

    public Task<int> ExecuteDeleteByKeyAsync(int genreId )
        => ExecuteDeleteAsync(x => x.GenreId == genreId );

    public Task<int> ExecuteUpdateByKeyAsync(int genreId , Expression<Func<SetPropertyCalls<Genre>, SetPropertyCalls<Genre>>> setPropertyCalls)
        => ExecuteUpdateAsync(x => x.GenreId == genreId , setPropertyCalls);
}
#endregion GenreDao

 #region InvoiceDao
public partial class InvoiceDao
{
	public async Task<Invoice> GetByKeyAsync(int invoiceId , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

        return await context.Set<Invoice>().FirstOrDefaultAsync(x =>  x.InvoiceId == invoiceId , ctk);
	}

	public async Task<bool> ExistsByKeyAsync(int invoiceId , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

		return await context.Set<Invoice>().CountAsync(x =>  x.InvoiceId == invoiceId , ctk) > 0;
	}

	public async Task<int> DeleteByKeyAsync(int invoiceId , CancellationToken ctk = default)
	{
        var entity = await GetByKeyAsync(invoiceId , ctk);

        if (entity == null)
            return 0;

        return await DeleteAsync(entity, ctk);
	}
	
	
	#region GetByCustomerId
    public async Task<List<Invoice>> GetByCustomerIdAsync(int customerId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByCustomerIdCore(context, customerId).ToListAsync(ctk);
    }
    
    public async Task<Invoice[]> GetByCustomerIdAsArrayAsync(int customerId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByCustomerIdCore(context, customerId).ToArrayAsync(ctk);
    }
    
    public async Task<HashSet<Invoice>> GetByCustomerIdAsHastSetAsync(int customerId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByCustomerIdCore(context, customerId).ToHashSetAsync(ctk);
    }
    
    public async Task<Dictionary<K, Invoice>> GetByCustomerIdAsDictionaryAsync<K>(int customerId, Func<Invoice, K> keySelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByCustomerIdCore(context, customerId).ToDictionaryAsync(keySelector, ctk);
    }
    
    public async Task<Dictionary<K, E>> GetByCustomerIdAsDictionaryAsync<K, E>(int customerId, Func<Invoice, K> keySelector,Func<Invoice, E> elementSelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByCustomerIdCore(context, customerId).ToDictionaryAsync(keySelector, elementSelector, ctk);
    }
    #endregion
    

    public Task<int> ExecuteDeleteByKeyAsync(int invoiceId )
        => ExecuteDeleteAsync(x => x.InvoiceId == invoiceId );

    public Task<int> ExecuteUpdateByKeyAsync(int invoiceId , Expression<Func<SetPropertyCalls<Invoice>, SetPropertyCalls<Invoice>>> setPropertyCalls)
        => ExecuteUpdateAsync(x => x.InvoiceId == invoiceId , setPropertyCalls);
}
#endregion InvoiceDao

 #region InvoiceLineDao
public partial class InvoiceLineDao
{
	public async Task<InvoiceLine> GetByKeyAsync(int invoiceLineId , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

        return await context.Set<InvoiceLine>().FirstOrDefaultAsync(x =>  x.InvoiceLineId == invoiceLineId , ctk);
	}

	public async Task<bool> ExistsByKeyAsync(int invoiceLineId , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

		return await context.Set<InvoiceLine>().CountAsync(x =>  x.InvoiceLineId == invoiceLineId , ctk) > 0;
	}

	public async Task<int> DeleteByKeyAsync(int invoiceLineId , CancellationToken ctk = default)
	{
        var entity = await GetByKeyAsync(invoiceLineId , ctk);

        if (entity == null)
            return 0;

        return await DeleteAsync(entity, ctk);
	}
	
	
	#region GetByInvoiceId
    public async Task<List<InvoiceLine>> GetByInvoiceIdAsync(int invoiceId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByInvoiceIdCore(context, invoiceId).ToListAsync(ctk);
    }
    
    public async Task<InvoiceLine[]> GetByInvoiceIdAsArrayAsync(int invoiceId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByInvoiceIdCore(context, invoiceId).ToArrayAsync(ctk);
    }
    
    public async Task<HashSet<InvoiceLine>> GetByInvoiceIdAsHastSetAsync(int invoiceId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByInvoiceIdCore(context, invoiceId).ToHashSetAsync(ctk);
    }
    
    public async Task<Dictionary<K, InvoiceLine>> GetByInvoiceIdAsDictionaryAsync<K>(int invoiceId, Func<InvoiceLine, K> keySelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByInvoiceIdCore(context, invoiceId).ToDictionaryAsync(keySelector, ctk);
    }
    
    public async Task<Dictionary<K, E>> GetByInvoiceIdAsDictionaryAsync<K, E>(int invoiceId, Func<InvoiceLine, K> keySelector,Func<InvoiceLine, E> elementSelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByInvoiceIdCore(context, invoiceId).ToDictionaryAsync(keySelector, elementSelector, ctk);
    }
    #endregion
    

    public Task<int> ExecuteDeleteByKeyAsync(int invoiceLineId )
        => ExecuteDeleteAsync(x => x.InvoiceLineId == invoiceLineId );

    public Task<int> ExecuteUpdateByKeyAsync(int invoiceLineId , Expression<Func<SetPropertyCalls<InvoiceLine>, SetPropertyCalls<InvoiceLine>>> setPropertyCalls)
        => ExecuteUpdateAsync(x => x.InvoiceLineId == invoiceLineId , setPropertyCalls);
}
#endregion InvoiceLineDao

 #region MediaTypeDao
public partial class MediaTypeDao
{
	public async Task<MediaType> GetByKeyAsync(int mediaTypeId , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

        return await context.Set<MediaType>().FirstOrDefaultAsync(x =>  x.MediaTypeId == mediaTypeId , ctk);
	}

	public async Task<bool> ExistsByKeyAsync(int mediaTypeId , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

		return await context.Set<MediaType>().CountAsync(x =>  x.MediaTypeId == mediaTypeId , ctk) > 0;
	}

	public async Task<int> DeleteByKeyAsync(int mediaTypeId , CancellationToken ctk = default)
	{
        var entity = await GetByKeyAsync(mediaTypeId , ctk);

        if (entity == null)
            return 0;

        return await DeleteAsync(entity, ctk);
	}
	
	

    public Task<int> ExecuteDeleteByKeyAsync(int mediaTypeId )
        => ExecuteDeleteAsync(x => x.MediaTypeId == mediaTypeId );

    public Task<int> ExecuteUpdateByKeyAsync(int mediaTypeId , Expression<Func<SetPropertyCalls<MediaType>, SetPropertyCalls<MediaType>>> setPropertyCalls)
        => ExecuteUpdateAsync(x => x.MediaTypeId == mediaTypeId , setPropertyCalls);
}
#endregion MediaTypeDao

 #region PlaylistDao
public partial class PlaylistDao
{
	public async Task<Playlist> GetByKeyAsync(int playlistId , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

        return await context.Set<Playlist>().FirstOrDefaultAsync(x =>  x.PlaylistId == playlistId , ctk);
	}

	public async Task<bool> ExistsByKeyAsync(int playlistId , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

		return await context.Set<Playlist>().CountAsync(x =>  x.PlaylistId == playlistId , ctk) > 0;
	}

	public async Task<int> DeleteByKeyAsync(int playlistId , CancellationToken ctk = default)
	{
        var entity = await GetByKeyAsync(playlistId , ctk);

        if (entity == null)
            return 0;

        return await DeleteAsync(entity, ctk);
	}
	
	

    public Task<int> ExecuteDeleteByKeyAsync(int playlistId )
        => ExecuteDeleteAsync(x => x.PlaylistId == playlistId );

    public Task<int> ExecuteUpdateByKeyAsync(int playlistId , Expression<Func<SetPropertyCalls<Playlist>, SetPropertyCalls<Playlist>>> setPropertyCalls)
        => ExecuteUpdateAsync(x => x.PlaylistId == playlistId , setPropertyCalls);
}
#endregion PlaylistDao

 #region PlaylistTrackDao
public partial class PlaylistTrackDao
{
	public async Task<PlaylistTrack> GetByKeyAsync(int playlistId , int trackId , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

        return await context.Set<PlaylistTrack>().FirstOrDefaultAsync(x =>  x.PlaylistId == playlistId  &&  x.TrackId == trackId , ctk);
	}

	public async Task<bool> ExistsByKeyAsync(int playlistId , int trackId , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

		return await context.Set<PlaylistTrack>().CountAsync(x =>  x.PlaylistId == playlistId  &&  x.TrackId == trackId , ctk) > 0;
	}

	public async Task<int> DeleteByKeyAsync(int playlistId , int trackId , CancellationToken ctk = default)
	{
        var entity = await GetByKeyAsync(playlistId , trackId , ctk);

        if (entity == null)
            return 0;

        return await DeleteAsync(entity, ctk);
	}
	
	
	#region GetByPlaylistId
    public async Task<List<PlaylistTrack>> GetByPlaylistIdAsync(int playlistId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByPlaylistIdCore(context, playlistId).ToListAsync(ctk);
    }
    
    public async Task<PlaylistTrack[]> GetByPlaylistIdAsArrayAsync(int playlistId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByPlaylistIdCore(context, playlistId).ToArrayAsync(ctk);
    }
    
    public async Task<HashSet<PlaylistTrack>> GetByPlaylistIdAsHastSetAsync(int playlistId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByPlaylistIdCore(context, playlistId).ToHashSetAsync(ctk);
    }
    
    public async Task<Dictionary<K, PlaylistTrack>> GetByPlaylistIdAsDictionaryAsync<K>(int playlistId, Func<PlaylistTrack, K> keySelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByPlaylistIdCore(context, playlistId).ToDictionaryAsync(keySelector, ctk);
    }
    
    public async Task<Dictionary<K, E>> GetByPlaylistIdAsDictionaryAsync<K, E>(int playlistId, Func<PlaylistTrack, K> keySelector,Func<PlaylistTrack, E> elementSelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByPlaylistIdCore(context, playlistId).ToDictionaryAsync(keySelector, elementSelector, ctk);
    }
    #endregion
    
	#region GetByTrackId
    public async Task<List<PlaylistTrack>> GetByTrackIdAsync(int trackId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByTrackIdCore(context, trackId).ToListAsync(ctk);
    }
    
    public async Task<PlaylistTrack[]> GetByTrackIdAsArrayAsync(int trackId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByTrackIdCore(context, trackId).ToArrayAsync(ctk);
    }
    
    public async Task<HashSet<PlaylistTrack>> GetByTrackIdAsHastSetAsync(int trackId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByTrackIdCore(context, trackId).ToHashSetAsync(ctk);
    }
    
    public async Task<Dictionary<K, PlaylistTrack>> GetByTrackIdAsDictionaryAsync<K>(int trackId, Func<PlaylistTrack, K> keySelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByTrackIdCore(context, trackId).ToDictionaryAsync(keySelector, ctk);
    }
    
    public async Task<Dictionary<K, E>> GetByTrackIdAsDictionaryAsync<K, E>(int trackId, Func<PlaylistTrack, K> keySelector,Func<PlaylistTrack, E> elementSelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByTrackIdCore(context, trackId).ToDictionaryAsync(keySelector, elementSelector, ctk);
    }
    #endregion
    

    public Task<int> ExecuteDeleteByKeyAsync(int playlistId , int trackId )
        => ExecuteDeleteAsync(x => x.PlaylistId == playlistId && x.TrackId == trackId );

    public Task<int> ExecuteUpdateByKeyAsync(int playlistId , int trackId , Expression<Func<SetPropertyCalls<PlaylistTrack>, SetPropertyCalls<PlaylistTrack>>> setPropertyCalls)
        => ExecuteUpdateAsync(x => x.PlaylistId == playlistId && x.TrackId == trackId , setPropertyCalls);
}
#endregion PlaylistTrackDao

 #region PlaylistTrackHistoryDao
public partial class PlaylistTrackHistoryDao
{
	public async Task<PlaylistTrackHistory> GetByKeyAsync(int playlistId , int trackId , DateTime writtenAt , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

        return await context.Set<PlaylistTrackHistory>().FirstOrDefaultAsync(x =>  x.PlaylistId == playlistId  &&  x.TrackId == trackId  &&  x.WrittenAt == writtenAt , ctk);
	}

	public async Task<bool> ExistsByKeyAsync(int playlistId , int trackId , DateTime writtenAt , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

		return await context.Set<PlaylistTrackHistory>().CountAsync(x =>  x.PlaylistId == playlistId  &&  x.TrackId == trackId  &&  x.WrittenAt == writtenAt , ctk) > 0;
	}

	public async Task<int> DeleteByKeyAsync(int playlistId , int trackId , DateTime writtenAt , CancellationToken ctk = default)
	{
        var entity = await GetByKeyAsync(playlistId , trackId , writtenAt , ctk);

        if (entity == null)
            return 0;

        return await DeleteAsync(entity, ctk);
	}
	
	
	#region GetByPlaylistId
    public async Task<List<PlaylistTrackHistory>> GetByPlaylistIdAsync(int playlistId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByPlaylistIdCore(context, playlistId).ToListAsync(ctk);
    }
    
    public async Task<PlaylistTrackHistory[]> GetByPlaylistIdAsArrayAsync(int playlistId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByPlaylistIdCore(context, playlistId).ToArrayAsync(ctk);
    }
    
    public async Task<HashSet<PlaylistTrackHistory>> GetByPlaylistIdAsHastSetAsync(int playlistId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByPlaylistIdCore(context, playlistId).ToHashSetAsync(ctk);
    }
    
    public async Task<Dictionary<K, PlaylistTrackHistory>> GetByPlaylistIdAsDictionaryAsync<K>(int playlistId, Func<PlaylistTrackHistory, K> keySelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByPlaylistIdCore(context, playlistId).ToDictionaryAsync(keySelector, ctk);
    }
    
    public async Task<Dictionary<K, E>> GetByPlaylistIdAsDictionaryAsync<K, E>(int playlistId, Func<PlaylistTrackHistory, K> keySelector,Func<PlaylistTrackHistory, E> elementSelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByPlaylistIdCore(context, playlistId).ToDictionaryAsync(keySelector, elementSelector, ctk);
    }
    #endregion
    
	#region GetByTrackId
    public async Task<List<PlaylistTrackHistory>> GetByTrackIdAsync(int trackId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByTrackIdCore(context, trackId).ToListAsync(ctk);
    }
    
    public async Task<PlaylistTrackHistory[]> GetByTrackIdAsArrayAsync(int trackId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByTrackIdCore(context, trackId).ToArrayAsync(ctk);
    }
    
    public async Task<HashSet<PlaylistTrackHistory>> GetByTrackIdAsHastSetAsync(int trackId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByTrackIdCore(context, trackId).ToHashSetAsync(ctk);
    }
    
    public async Task<Dictionary<K, PlaylistTrackHistory>> GetByTrackIdAsDictionaryAsync<K>(int trackId, Func<PlaylistTrackHistory, K> keySelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByTrackIdCore(context, trackId).ToDictionaryAsync(keySelector, ctk);
    }
    
    public async Task<Dictionary<K, E>> GetByTrackIdAsDictionaryAsync<K, E>(int trackId, Func<PlaylistTrackHistory, K> keySelector,Func<PlaylistTrackHistory, E> elementSelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByTrackIdCore(context, trackId).ToDictionaryAsync(keySelector, elementSelector, ctk);
    }
    #endregion
    

    public Task<int> ExecuteDeleteByKeyAsync(int playlistId , int trackId , DateTime writtenAt )
        => ExecuteDeleteAsync(x => x.PlaylistId == playlistId && x.TrackId == trackId && x.WrittenAt == writtenAt );

    public Task<int> ExecuteUpdateByKeyAsync(int playlistId , int trackId , DateTime writtenAt , Expression<Func<SetPropertyCalls<PlaylistTrackHistory>, SetPropertyCalls<PlaylistTrackHistory>>> setPropertyCalls)
        => ExecuteUpdateAsync(x => x.PlaylistId == playlistId && x.TrackId == trackId && x.WrittenAt == writtenAt , setPropertyCalls);
}
#endregion PlaylistTrackHistoryDao

 #region TimeTableDao
public partial class TimeTableDao
{
	public async Task<TimeTable> GetByKeyAsync(TimeOnly time , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

        return await context.Set<TimeTable>().FirstOrDefaultAsync(x =>  x.Time == time , ctk);
	}

	public async Task<bool> ExistsByKeyAsync(TimeOnly time , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

		return await context.Set<TimeTable>().CountAsync(x =>  x.Time == time , ctk) > 0;
	}

	public async Task<int> DeleteByKeyAsync(TimeOnly time , CancellationToken ctk = default)
	{
        var entity = await GetByKeyAsync(time , ctk);

        if (entity == null)
            return 0;

        return await DeleteAsync(entity, ctk);
	}
	
	

    public Task<int> ExecuteDeleteByKeyAsync(TimeOnly time )
        => ExecuteDeleteAsync(x => x.Time == time );

    public Task<int> ExecuteUpdateByKeyAsync(TimeOnly time , Expression<Func<SetPropertyCalls<TimeTable>, SetPropertyCalls<TimeTable>>> setPropertyCalls)
        => ExecuteUpdateAsync(x => x.Time == time , setPropertyCalls);
}
#endregion TimeTableDao

 #region TrackDao
public partial class TrackDao
{
	public async Task<Track> GetByKeyAsync(int trackId , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

        return await context.Set<Track>().FirstOrDefaultAsync(x =>  x.TrackId == trackId , ctk);
	}

	public async Task<bool> ExistsByKeyAsync(int trackId , CancellationToken ctk = default)
	{
        await using var context = DbContextFactory.Create();

		return await context.Set<Track>().CountAsync(x =>  x.TrackId == trackId , ctk) > 0;
	}

	public async Task<int> DeleteByKeyAsync(int trackId , CancellationToken ctk = default)
	{
        var entity = await GetByKeyAsync(trackId , ctk);

        if (entity == null)
            return 0;

        return await DeleteAsync(entity, ctk);
	}
	
	
	#region GetByAlbumId
    public async Task<List<Track>> GetByAlbumIdAsync(int? albumId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByAlbumIdCore(context, albumId).ToListAsync(ctk);
    }
    
    public async Task<Track[]> GetByAlbumIdAsArrayAsync(int? albumId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByAlbumIdCore(context, albumId).ToArrayAsync(ctk);
    }
    
    public async Task<HashSet<Track>> GetByAlbumIdAsHastSetAsync(int? albumId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByAlbumIdCore(context, albumId).ToHashSetAsync(ctk);
    }
    
    public async Task<Dictionary<K, Track>> GetByAlbumIdAsDictionaryAsync<K>(int? albumId, Func<Track, K> keySelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByAlbumIdCore(context, albumId).ToDictionaryAsync(keySelector, ctk);
    }
    
    public async Task<Dictionary<K, E>> GetByAlbumIdAsDictionaryAsync<K, E>(int? albumId, Func<Track, K> keySelector,Func<Track, E> elementSelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByAlbumIdCore(context, albumId).ToDictionaryAsync(keySelector, elementSelector, ctk);
    }
    #endregion
    
	#region GetByGenreId
    public async Task<List<Track>> GetByGenreIdAsync(int genreId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByGenreIdCore(context, genreId).ToListAsync(ctk);
    }
    
    public async Task<Track[]> GetByGenreIdAsArrayAsync(int genreId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByGenreIdCore(context, genreId).ToArrayAsync(ctk);
    }
    
    public async Task<HashSet<Track>> GetByGenreIdAsHastSetAsync(int genreId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByGenreIdCore(context, genreId).ToHashSetAsync(ctk);
    }
    
    public async Task<Dictionary<K, Track>> GetByGenreIdAsDictionaryAsync<K>(int genreId, Func<Track, K> keySelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByGenreIdCore(context, genreId).ToDictionaryAsync(keySelector, ctk);
    }
    
    public async Task<Dictionary<K, E>> GetByGenreIdAsDictionaryAsync<K, E>(int genreId, Func<Track, K> keySelector,Func<Track, E> elementSelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByGenreIdCore(context, genreId).ToDictionaryAsync(keySelector, elementSelector, ctk);
    }
    #endregion
    
	#region GetByMediaTypeId
    public async Task<List<Track>> GetByMediaTypeIdAsync(int mediaTypeId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByMediaTypeIdCore(context, mediaTypeId).ToListAsync(ctk);
    }
    
    public async Task<Track[]> GetByMediaTypeIdAsArrayAsync(int mediaTypeId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByMediaTypeIdCore(context, mediaTypeId).ToArrayAsync(ctk);
    }
    
    public async Task<HashSet<Track>> GetByMediaTypeIdAsHastSetAsync(int mediaTypeId, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByMediaTypeIdCore(context, mediaTypeId).ToHashSetAsync(ctk);
    }
    
    public async Task<Dictionary<K, Track>> GetByMediaTypeIdAsDictionaryAsync<K>(int mediaTypeId, Func<Track, K> keySelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByMediaTypeIdCore(context, mediaTypeId).ToDictionaryAsync(keySelector, ctk);
    }
    
    public async Task<Dictionary<K, E>> GetByMediaTypeIdAsDictionaryAsync<K, E>(int mediaTypeId, Func<Track, K> keySelector,Func<Track, E> elementSelector, CancellationToken ctk = default)
    {
        await using var context = DbContextFactory.Create();

        return await GetByMediaTypeIdCore(context, mediaTypeId).ToDictionaryAsync(keySelector, elementSelector, ctk);
    }
    #endregion
    

    public Task<int> ExecuteDeleteByKeyAsync(int trackId )
        => ExecuteDeleteAsync(x => x.TrackId == trackId );

    public Task<int> ExecuteUpdateByKeyAsync(int trackId , Expression<Func<SetPropertyCalls<Track>, SetPropertyCalls<Track>>> setPropertyCalls)
        => ExecuteUpdateAsync(x => x.TrackId == trackId , setPropertyCalls);
}
#endregion TrackDao


