// <auto-generated> This file has been generated by Gccg</auto-generated>
#region using
using System.Net.Http.Json;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
#endregion

namespace Chinook.Data;

public partial class Api
{
    public static string JwtToken { get; set; }

    public static string BaseAddress { get; set; }
    
    private const string Authorization = "Authorization";
    private const string Bearer = "Bearer";

    internal static HttpClient CreateHttpClient()
    {
        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri(Api.BaseAddress);

        if (Api.JwtToken != null)
            client.DefaultRequestHeaders.Add(Authorization, $"{Bearer} {Api.JwtToken}");

        return client;
    }

    public static async Task<string> GetJwtToken(string userName, string password)
    {
        var authInfo = new {UserName = "5", Password = "Andrew"};
        var response = await CreateHttpClient().PostAsJsonAsync("api/auth", authInfo);
        return response.Content.ReadAsStringAsync().Result;
    }

    #region clients
     public static AlbumApi Album => new AlbumApi(); 
 public static ArtistApi Artist => new ArtistApi(); 
 public static CodeApi Code => new CodeApi(); 
 public static CodeCategoryApi CodeCategory => new CodeCategoryApi(); 
 public static CustomerApi Customer => new CustomerApi(); 
 public static DateTableApi DateTable => new DateTableApi(); 
 public static EmployeeApi Employee => new EmployeeApi(); 
 public static GenreApi Genre => new GenreApi(); 
 public static InvoiceApi Invoice => new InvoiceApi(); 
 public static InvoiceLineApi InvoiceLine => new InvoiceLineApi(); 
 public static MediaTypeApi MediaType => new MediaTypeApi(); 
 public static PlaylistApi Playlist => new PlaylistApi(); 
 public static PlaylistTrackApi PlaylistTrack => new PlaylistTrackApi(); 
 public static PlaylistTrackHistoryApi PlaylistTrackHistory => new PlaylistTrackHistoryApi(); 
 public static TimeTableApi TimeTable => new TimeTableApi(); 
 public static TrackApi Track => new TrackApi(); 

    #endregion
}

public abstract partial class EntityApi<T>
{
    protected const string Authorization = "Authorization";
    protected const string Bearer = "Bearer";

    protected string GetAddress(params object[] parameters)
    {
        StringBuilder builder = new ($"api/{EntityName}");
        
        foreach (var parameter in parameters)
            builder.Append($"/{parameter}");

        return builder.ToString();
    }

    protected HttpClient CreateHttpClient() => Api.CreateHttpClient();

    protected static JsonSerializerOptions Options { get; } = new ()
      {
          DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingDefault
      };

    protected abstract string EntityName { get; }

    public virtual async Task<List<T>> Get()
    {
        return await CreateHttpClient().GetFromJsonAsync<List<T>>(GetAddress(), Options);
    }

    public virtual async Task<T> GetFirst()
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<T>(GetAddress("first"), Options);
    }

    public virtual async Task<T> GetLast()
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<T>(GetAddress("last"), Options);
    }

    public virtual async Task<int> GetCount()
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<int>(GetAddress("count"), Options);
    }

    public virtual async Task<T> Insert(T entity)
    {
        using HttpClient client = CreateHttpClient();
        var response = await client.PostAsJsonAsync(GetAddress(), entity, Options);
        return await response.Content.ReadFromJsonAsync<T>();
    }

    public virtual async Task<int> Update(T entity)
    {
        using HttpClient client = CreateHttpClient();
        var response = await client.PutAsJsonAsync(GetAddress(), entity, Options);
        return await response.Content.ReadFromJsonAsync<int>();
    }
}


#region clients

public partial class AlbumBaseApi : EntityApi<Album>
{
    protected override string EntityName => nameof(Album);

    public virtual async Task<Album> GetByKey(int albumId )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<Album>(GetAddress(albumId ), Options);
    }

    public virtual async Task<bool> ExistsByKey(int albumId )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<bool>(GetAddress("exists", albumId ), Options);
    }

    public virtual async Task<List<Album>> GetByArtistId(int artistId)
    {
        HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<List<Album>>(GetAddress("artistId", artistId), Options);
    }
    

    public virtual async Task<int> DeleteByKey(int albumId )
    {
        using HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(albumId ));
        return await response.Content.ReadFromJsonAsync<int>(Options);
    }
}

public partial class AlbumApi : AlbumBaseApi
{
}


public partial class ArtistBaseApi : EntityApi<Artist>
{
    protected override string EntityName => nameof(Artist);

    public virtual async Task<Artist> GetByKey(int artistId )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<Artist>(GetAddress(artistId ), Options);
    }

    public virtual async Task<bool> ExistsByKey(int artistId )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<bool>(GetAddress("exists", artistId ), Options);
    }

    

    public virtual async Task<int> DeleteByKey(int artistId )
    {
        using HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(artistId ));
        return await response.Content.ReadFromJsonAsync<int>(Options);
    }
}

public partial class ArtistApi : ArtistBaseApi
{
}


public partial class CodeBaseApi : EntityApi<Code>
{
    protected override string EntityName => nameof(Code);

    public virtual async Task<Code> GetByKey(int codeId )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<Code>(GetAddress(codeId ), Options);
    }

    public virtual async Task<bool> ExistsByKey(int codeId )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<bool>(GetAddress("exists", codeId ), Options);
    }

    public virtual async Task<List<Code>> GetByCodeCategoryId(int codeCategoryId)
    {
        HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<List<Code>>(GetAddress("codeCategoryId", codeCategoryId), Options);
    }
    

    public virtual async Task<int> DeleteByKey(int codeId )
    {
        using HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(codeId ));
        return await response.Content.ReadFromJsonAsync<int>(Options);
    }
}

public partial class CodeApi : CodeBaseApi
{
}


public partial class CodeCategoryBaseApi : EntityApi<CodeCategory>
{
    protected override string EntityName => nameof(CodeCategory);

    public virtual async Task<CodeCategory> GetByKey(int codeCategoryId )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<CodeCategory>(GetAddress(codeCategoryId ), Options);
    }

    public virtual async Task<bool> ExistsByKey(int codeCategoryId )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<bool>(GetAddress("exists", codeCategoryId ), Options);
    }

    

    public virtual async Task<int> DeleteByKey(int codeCategoryId )
    {
        using HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(codeCategoryId ));
        return await response.Content.ReadFromJsonAsync<int>(Options);
    }
}

public partial class CodeCategoryApi : CodeCategoryBaseApi
{
}


public partial class CustomerBaseApi : EntityApi<Customer>
{
    protected override string EntityName => nameof(Customer);

    public virtual async Task<Customer> GetByKey(int customerId )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<Customer>(GetAddress(customerId ), Options);
    }

    public virtual async Task<bool> ExistsByKey(int customerId )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<bool>(GetAddress("exists", customerId ), Options);
    }

    public virtual async Task<List<Customer>> GetBySupportRepId(int? supportRepId)
    {
        HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<List<Customer>>(GetAddress("supportRepId", supportRepId), Options);
    }
    

    public virtual async Task<int> DeleteByKey(int customerId )
    {
        using HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(customerId ));
        return await response.Content.ReadFromJsonAsync<int>(Options);
    }
}

public partial class CustomerApi : CustomerBaseApi
{
}


public partial class DateTableBaseApi : EntityApi<DateTable>
{
    protected override string EntityName => nameof(DateTable);

    public virtual async Task<DateTable> GetByKey(DateOnly date )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<DateTable>(GetAddress(date ), Options);
    }

    public virtual async Task<bool> ExistsByKey(DateOnly date )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<bool>(GetAddress("exists", date ), Options);
    }

    

    public virtual async Task<int> DeleteByKey(DateOnly date )
    {
        using HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(date ));
        return await response.Content.ReadFromJsonAsync<int>(Options);
    }
}

public partial class DateTableApi : DateTableBaseApi
{
}


public partial class EmployeeBaseApi : EntityApi<Employee>
{
    protected override string EntityName => nameof(Employee);

    public virtual async Task<Employee> GetByKey(int employeeId )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<Employee>(GetAddress(employeeId ), Options);
    }

    public virtual async Task<bool> ExistsByKey(int employeeId )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<bool>(GetAddress("exists", employeeId ), Options);
    }

    public virtual async Task<List<Employee>> GetByReportsTo(int? reportsTo)
    {
        HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<List<Employee>>(GetAddress("reportsTo", reportsTo), Options);
    }
    

    public virtual async Task<int> DeleteByKey(int employeeId )
    {
        using HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(employeeId ));
        return await response.Content.ReadFromJsonAsync<int>(Options);
    }
}

public partial class EmployeeApi : EmployeeBaseApi
{
}


public partial class GenreBaseApi : EntityApi<Genre>
{
    protected override string EntityName => nameof(Genre);

    public virtual async Task<Genre> GetByKey(int genreId )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<Genre>(GetAddress(genreId ), Options);
    }

    public virtual async Task<bool> ExistsByKey(int genreId )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<bool>(GetAddress("exists", genreId ), Options);
    }

    

    public virtual async Task<int> DeleteByKey(int genreId )
    {
        using HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(genreId ));
        return await response.Content.ReadFromJsonAsync<int>(Options);
    }
}

public partial class GenreApi : GenreBaseApi
{
}


public partial class InvoiceBaseApi : EntityApi<Invoice>
{
    protected override string EntityName => nameof(Invoice);

    public virtual async Task<Invoice> GetByKey(int invoiceId )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<Invoice>(GetAddress(invoiceId ), Options);
    }

    public virtual async Task<bool> ExistsByKey(int invoiceId )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<bool>(GetAddress("exists", invoiceId ), Options);
    }

    public virtual async Task<List<Invoice>> GetByCustomerId(int customerId)
    {
        HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<List<Invoice>>(GetAddress("customerId", customerId), Options);
    }
    

    public virtual async Task<int> DeleteByKey(int invoiceId )
    {
        using HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(invoiceId ));
        return await response.Content.ReadFromJsonAsync<int>(Options);
    }
}

public partial class InvoiceApi : InvoiceBaseApi
{
}


public partial class InvoiceLineBaseApi : EntityApi<InvoiceLine>
{
    protected override string EntityName => nameof(InvoiceLine);

    public virtual async Task<InvoiceLine> GetByKey(int invoiceLineId )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<InvoiceLine>(GetAddress(invoiceLineId ), Options);
    }

    public virtual async Task<bool> ExistsByKey(int invoiceLineId )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<bool>(GetAddress("exists", invoiceLineId ), Options);
    }

    public virtual async Task<List<InvoiceLine>> GetByInvoiceId(int invoiceId)
    {
        HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<List<InvoiceLine>>(GetAddress("invoiceId", invoiceId), Options);
    }
    

    public virtual async Task<int> DeleteByKey(int invoiceLineId )
    {
        using HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(invoiceLineId ));
        return await response.Content.ReadFromJsonAsync<int>(Options);
    }
}

public partial class InvoiceLineApi : InvoiceLineBaseApi
{
}


public partial class MediaTypeBaseApi : EntityApi<MediaType>
{
    protected override string EntityName => nameof(MediaType);

    public virtual async Task<MediaType> GetByKey(int mediaTypeId )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<MediaType>(GetAddress(mediaTypeId ), Options);
    }

    public virtual async Task<bool> ExistsByKey(int mediaTypeId )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<bool>(GetAddress("exists", mediaTypeId ), Options);
    }

    

    public virtual async Task<int> DeleteByKey(int mediaTypeId )
    {
        using HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(mediaTypeId ));
        return await response.Content.ReadFromJsonAsync<int>(Options);
    }
}

public partial class MediaTypeApi : MediaTypeBaseApi
{
}


public partial class PlaylistBaseApi : EntityApi<Playlist>
{
    protected override string EntityName => nameof(Playlist);

    public virtual async Task<Playlist> GetByKey(int playlistId )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<Playlist>(GetAddress(playlistId ), Options);
    }

    public virtual async Task<bool> ExistsByKey(int playlistId )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<bool>(GetAddress("exists", playlistId ), Options);
    }

    

    public virtual async Task<int> DeleteByKey(int playlistId )
    {
        using HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(playlistId ));
        return await response.Content.ReadFromJsonAsync<int>(Options);
    }
}

public partial class PlaylistApi : PlaylistBaseApi
{
}


public partial class PlaylistTrackBaseApi : EntityApi<PlaylistTrack>
{
    protected override string EntityName => nameof(PlaylistTrack);

    public virtual async Task<PlaylistTrack> GetByKey(int playlistId , int trackId )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<PlaylistTrack>(GetAddress(playlistId , trackId ), Options);
    }

    public virtual async Task<bool> ExistsByKey(int playlistId , int trackId )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<bool>(GetAddress("exists", playlistId , trackId ), Options);
    }

    public virtual async Task<List<PlaylistTrack>> GetByPlaylistId(int playlistId)
    {
        HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<List<PlaylistTrack>>(GetAddress("playlistId", playlistId), Options);
    }
    public virtual async Task<List<PlaylistTrack>> GetByTrackId(int trackId)
    {
        HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<List<PlaylistTrack>>(GetAddress("trackId", trackId), Options);
    }
    

    public virtual async Task<int> DeleteByKey(int playlistId , int trackId )
    {
        using HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(playlistId , trackId ));
        return await response.Content.ReadFromJsonAsync<int>(Options);
    }
}

public partial class PlaylistTrackApi : PlaylistTrackBaseApi
{
}


public partial class PlaylistTrackHistoryBaseApi : EntityApi<PlaylistTrackHistory>
{
    protected override string EntityName => nameof(PlaylistTrackHistory);

    public virtual async Task<PlaylistTrackHistory> GetByKey(int playlistId , int trackId , DateTime writtenAt )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<PlaylistTrackHistory>(GetAddress(playlistId , trackId , writtenAt ), Options);
    }

    public virtual async Task<bool> ExistsByKey(int playlistId , int trackId , DateTime writtenAt )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<bool>(GetAddress("exists", playlistId , trackId , writtenAt ), Options);
    }

    public virtual async Task<List<PlaylistTrackHistory>> GetByPlaylistId(int playlistId)
    {
        HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<List<PlaylistTrackHistory>>(GetAddress("playlistId", playlistId), Options);
    }
    public virtual async Task<List<PlaylistTrackHistory>> GetByTrackId(int trackId)
    {
        HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<List<PlaylistTrackHistory>>(GetAddress("trackId", trackId), Options);
    }
    

    public virtual async Task<int> DeleteByKey(int playlistId , int trackId , DateTime writtenAt )
    {
        using HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(playlistId , trackId , writtenAt ));
        return await response.Content.ReadFromJsonAsync<int>(Options);
    }
}

public partial class PlaylistTrackHistoryApi : PlaylistTrackHistoryBaseApi
{
}


public partial class TimeTableBaseApi : EntityApi<TimeTable>
{
    protected override string EntityName => nameof(TimeTable);

    public virtual async Task<TimeTable> GetByKey(TimeOnly time )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<TimeTable>(GetAddress(time ), Options);
    }

    public virtual async Task<bool> ExistsByKey(TimeOnly time )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<bool>(GetAddress("exists", time ), Options);
    }

    

    public virtual async Task<int> DeleteByKey(TimeOnly time )
    {
        using HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(time ));
        return await response.Content.ReadFromJsonAsync<int>(Options);
    }
}

public partial class TimeTableApi : TimeTableBaseApi
{
}


public partial class TrackBaseApi : EntityApi<Track>
{
    protected override string EntityName => nameof(Track);

    public virtual async Task<Track> GetByKey(int trackId )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<Track>(GetAddress(trackId ), Options);
    }

    public virtual async Task<bool> ExistsByKey(int trackId )
    {
        using HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<bool>(GetAddress("exists", trackId ), Options);
    }

    public virtual async Task<List<Track>> GetByAlbumId(int? albumId)
    {
        HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<List<Track>>(GetAddress("albumId", albumId), Options);
    }
    public virtual async Task<List<Track>> GetByGenreId(int genreId)
    {
        HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<List<Track>>(GetAddress("genreId", genreId), Options);
    }
    public virtual async Task<List<Track>> GetByMediaTypeId(int mediaTypeId)
    {
        HttpClient client = CreateHttpClient();
        return await client.GetFromJsonAsync<List<Track>>(GetAddress("mediaTypeId", mediaTypeId), Options);
    }
    

    public virtual async Task<int> DeleteByKey(int trackId )
    {
        using HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(trackId ));
        return await response.Content.ReadFromJsonAsync<int>(Options);
    }
}

public partial class TrackApi : TrackBaseApi
{
}


#endregion