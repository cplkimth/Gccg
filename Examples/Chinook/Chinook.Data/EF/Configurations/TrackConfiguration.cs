// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Chinook.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;

namespace Chinook.Data.Configurations
{
    public partial class TrackConfiguration : IEntityTypeConfiguration<Track>
    {
        public void Configure(EntityTypeBuilder<Track> entity)
        {
            entity.ToTable("Track");

            entity.HasIndex(e => e.AlbumId, "IFK_TrackAlbumId");

            entity.HasIndex(e => e.GenreId, "IX_Track_GenreId");

            entity.HasIndex(e => e.MediaTypeId, "IX_Track_MediaTypeId");

            entity.Property(e => e.BinaryCol)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValueSql("((0))")
                .IsFixedLength();
            entity.Property(e => e.BinaryColNull)
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.CharCol)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.CharColNull)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DateCol).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.DateTimeCol)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DateTimeColNull).HasColumnType("datetime");
            entity.Property(e => e.DecimalCol).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DecimalColNull).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.GenreId).HasDefaultValue(1);
            entity.Property(e => e.GuidCol).HasDefaultValueSql("(newid())");
            entity.Property(e => e.MediaTypeId).HasDefaultValue(1);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.NcharCol)
                .IsRequired()
                .HasMaxLength(10)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.NcharColNull)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.NvarCharCol)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("");
            entity.Property(e => e.NvarCharColNull)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("");
            entity.Property(e => e.SmallDateTimeCol)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.SmallDateTimeColNull).HasColumnType("smalldatetime");
            entity.Property(e => e.SmallMoneyCol).HasColumnType("smallmoney");
            entity.Property(e => e.SmallMoneyColNull).HasColumnType("smallmoney");
            entity.Property(e => e.TimeCol).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.TimeStampCol)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.VarBinaryCol)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.VarBinaryColNull).HasMaxLength(50);
            entity.Property(e => e.VarCharCol)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.VarCharColNull)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Album).WithMany(p => p.Tracks)
                .HasForeignKey(d => d.AlbumId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TrackAlbumId");

            entity.HasOne(d => d.Genre).WithMany(p => p.Tracks)
                .HasForeignKey(d => d.GenreId)
                .HasConstraintName("FK_Track_Genre");

            entity.HasOne(d => d.MediaType).WithMany(p => p.Tracks)
                .HasForeignKey(d => d.MediaTypeId)
                .HasConstraintName("FK_Track_MediaType");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<Track> entity);
    }
}
