{
	"Version":2,
	"Scope":0,
	"TargetPath":"Api.g.cs",
	"Overwritable": true
}
*** body starts here ***
// This file has been generated by Gccg on `GeneratedTime`.
#region using
using System.Net.Http.Json;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using `DataProjectNamespace`;
#endregion

namespace `ApiClientProjectNamespace`;

public partial class Api
{
    public static string JwtToken { get; set; }

    public static string BaseAddress { get; set; }
    
    private const string Authorization = "Authorization";
    private const string Bearer = "Bearer";

    internal static HttpClient CreateHttpClient()
    {
        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri(Api.BaseAddress);

        if (Api.JwtToken != null)
            client.DefaultRequestHeaders.Add(Authorization, $"{Bearer} {Api.JwtToken}");

        return client;
    }

    public static async Task<string> GetJwtToken(string userName, string password)
    {
        var authInfo = new {UserName = "5", Password = "Andrew"};
        var response = await CreateHttpClient().PostAsJsonAsync("api/auth", authInfo);
        return response.Content.ReadAsStringAsync().Result;
    }

    #region clients
    `T public static `Name`Api `Name` => new `Name`Api(); T`
    #endregion
}

public abstract partial class EntityApi<T>
{
    protected const string Authorization = "Authorization";
    protected const string Bearer = "Bearer";

    protected string GetAddress(params object[] parameters)
    {
        StringBuilder builder = new ($"api/{EntityName}");
        
        foreach (var parameter in parameters)
            builder.Append($"/{parameter}");

        return builder.ToString();
    }

    protected HttpClient CreateHttpClient() => Api.CreateHttpClient();

    protected static JsonSerializerOptions Options { get; } = new ()
      {
          DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingDefault
      };

    protected abstract string EntityName { get; }

    public Task<List<T>> GetAsync()
    {
        return CreateHttpClient().GetFromJsonAsync<List<T>>(GetAddress(), Options);
    }

    public Task<T> GetFirstAsync()
    {
        HttpClient client = CreateHttpClient();
        return client.GetFromJsonAsync<T>(GetAddress("first"), Options);
    }

    public Task<int> GetCountAsync()
    {
        HttpClient client = CreateHttpClient();
        return client.GetFromJsonAsync<int>(GetAddress("count"), Options);
    }

    public async Task<T> InsertAsync(T entity)
    {
        HttpClient client = CreateHttpClient();
        var response = await client.PostAsJsonAsync(GetAddress(), entity);
        return await response.Content.ReadFromJsonAsync<T>();
    }

    public async Task<int> UpdateAsync(T entity)
    {
        HttpClient client = CreateHttpClient();
        var response = await client.PutAsJsonAsync(GetAddress(), entity);
        return await response.Content.ReadFromJsonAsync<int>();
    }
}

#region clients
`T
public partial class `Name`Api : EntityApi<`Name`>
{
    protected override string EntityName => nameof(`Name`);

    public Task<`Name`> GetByKeyAsync(`P:, :`Type` `name` ``)
    {
        HttpClient client = CreateHttpClient();
        return client.GetFromJsonAsync<`Name`>(GetAddress(`P:, :`name` ``), Options);
    }

    public async Task<int> DeleteAsync(`P:, :`Type` `name` ``)
    {
        HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(`P:, :`name` ``));
        return await response.Content.ReadFromJsonAsync<int>();
    }
}
T`
#endregion