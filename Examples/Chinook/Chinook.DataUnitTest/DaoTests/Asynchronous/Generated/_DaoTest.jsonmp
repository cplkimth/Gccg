{
	"Version":2,
	"Scope":1,
	"TargetPath":"`Name`DaoTestAsync.g.cs",
	"Overwritable": true
}
*** body starts here ***// <auto-generated> This file has been generated by Gccg</auto-generated>
#region using
using System.Net.Http.Json;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using `DataProjectNamespace`;
#endregion

namespace `SolutionName`.DataUnitTest.DaoTests.Asynchronous;

`T
[TestClass]
public partial class `Name`DaoTest : EntityDaoTest<`Name`>
{

    [TestInitialize]
    public async Task Initialize()
    {
        var procedures = new `DbContextName`Procedures(DbContextFactory.Create());
        await procedures.usp_InitializeAsync();
    }

    [TestMethod]
    public async Task GetCount()
    {
        var count = await Dao.`Name`.GetCountAsync();
        
        count.ShouldBeGreaterThan(0);
    }

    [TestMethod]
    public async Task GetByKey()
    {
        var first = await Dao.`Name`.GetFirstAsync();
        var entity = await Dao.`Name`.GetByKeyAsync(`P:, :first.`Name` ``);
        
        entity.PrimaryKeyValues.ShouldBe(first.PrimaryKeyValues);
    }

    [TestMethod]
    public async Task ExistsByKey()
    {
        var first = await Dao.`Name`.GetFirstAsync();
        
        (await Dao.`Name`.ExistsByKeyAsync(`P:, :first.`Name` ``)).ShouldBeTrue();
    }

    [TestMethod]
    public async Task Exists()
    {
        var first = await Dao.`Name`.GetFirstAsync();
        
        (await Dao.`Name`.ExistsAsync(x => `P: && :x.`Name` == first.`Name` ``)).ShouldBeTrue();
    }

    [TestMethod]
    public async Task DeleteByKey()
    {
        var first = await GetForDeleteAsync();
        await Dao.`Name`.DeleteByKeyAsync(`P:, :first.`Name` ``);
        
        (await Dao.`Name`.ExistsByKeyAsync(`P:, :first.`Name` ``)).ShouldBeFalse();
    }

    [TestMethod]
    public async Task DeleteAll()
    {
        var first = await GetForDeleteAsync();
        var count = await Dao.`Name`.DeleteAllAsync(x => `P: && :x.`Name` == first.`Name` ``);
        count.ShouldBeGreaterThan(0);

        (await Dao.`Name`.ExistsByKeyAsync(`P:, :first.`Name` ``)).ShouldBeFalse();
    }

    [TestMethod]
    public async Task Insert()
    {
        var first = await Dao.`Name`.GetFirstAsync();

        var oldCount = await Dao.`Name`.GetCountAsync();

        var entity = first.Clone();
        entity.ClearKeyValues();
        FillForInsert(entity);
        entity = await Dao.`Name`.InsertAsync(entity);

        var newCount = await Dao.`Name`.GetCountAsync();

        newCount.ShouldBe(oldCount + 1);
    }

    [TestMethod]
    public async Task Update()
    {
        var entity = await Dao.`Name`.GetFirstAsync();
        object value = SetUpdateField(entity);

        if (value == null)
            return;

        await Dao.`Name`.UpdateAsync(entity);

        entity = await Dao.`Name`.GetFirstAsync();

        GetUpdateField(entity).ShouldBe(value);
    }

    [TestMethod]
    public async Task GetFirst()
    {
        var entity = await Dao.`Name`.GetFirstAsync();
        entity.ShouldNotBeNull();
    }
}
T`
