// <auto-generated> This file has been generated by Gccg</auto-generated>
#region using
using Chinook.Data;
#endregion

namespace Chinook.DataUnitTest.DaoTests.Asynchronous;


[TestClass]
public partial class InvoiceDaoTestAsync : EntityDaoTest<Invoice>
{

    [TestInitialize]
    public async Task Initialize()
    {
        var procedures = new ChinookContextProcedures(DbContextFactory.Create());
        await procedures.usp_InitializeAsync();
    }

    [TestMethod]
    public async Task GetCount()
    {
        var count = await Dao.Invoice.GetCountAsync();
        
        count.ShouldBeGreaterThan(0);
    }

    [TestMethod]
    public async Task GetByKey()
    {
        var first = await Dao.Invoice.GetFirstAsync();
        var entity = await Dao.Invoice.GetByKeyAsync(first.InvoiceId );
        
        entity.PrimaryKeyValues.ShouldBe(first.PrimaryKeyValues);
    }

    [TestMethod]
    public async Task ExistsByKey()
    {
        var first = await Dao.Invoice.GetFirstAsync();
        
        (await Dao.Invoice.ExistsByKeyAsync(first.InvoiceId )).ShouldBeTrue();
    }

    [TestMethod]
    public async Task Exists()
    {
        var first = await Dao.Invoice.GetFirstAsync();
        
        (await Dao.Invoice.ExistsAsync(x => x.InvoiceId == first.InvoiceId )).ShouldBeTrue();
    }

    [TestMethod]
    public async Task DeleteByKey()
    {
        var first = await GetForDeleteAsync();
        await Dao.Invoice.DeleteByKeyAsync(first.InvoiceId );
        
        (await Dao.Invoice.ExistsByKeyAsync(first.InvoiceId )).ShouldBeFalse();
    }

    [TestMethod]
    public async Task DeleteAll()
    {
        var first = await GetForDeleteAsync();
        var count = await Dao.Invoice.DeleteAllAsync(x => x.InvoiceId == first.InvoiceId );
        count.ShouldBeGreaterThan(0);

        (await Dao.Invoice.ExistsByKeyAsync(first.InvoiceId )).ShouldBeFalse();
    }

    [TestMethod]
    public async Task Insert()
    {
        var first = await Dao.Invoice.GetFirstAsync();

        var oldCount = await Dao.Invoice.GetCountAsync();

        var entity = first.Clone();
        entity.ClearKeyValues();
        Asynchronous.InvoiceDaoTestAsync.FillForInsert(entity);
        entity = await Dao.Invoice.InsertAsync(entity);

        var newCount = await Dao.Invoice.GetCountAsync();

        newCount.ShouldBe(oldCount + 1);
    }

    [TestMethod]
    public async Task Update()
    {
        var entity = await Dao.Invoice.GetFirstAsync();
        object value = Asynchronous.InvoiceDaoTestAsync.SetUpdateField(entity);

        if (value == null)
            return;

        await Dao.Invoice.UpdateAsync(entity);

        entity = await Dao.Invoice.GetFirstAsync();

        Asynchronous.InvoiceDaoTestAsync.GetUpdateField(entity).ShouldBe(value);
    }

    [TestMethod]
    public async Task GetFirst()
    {
        var entity = await Dao.Invoice.GetFirstAsync();
        entity.ShouldNotBeNull();
    }
}


