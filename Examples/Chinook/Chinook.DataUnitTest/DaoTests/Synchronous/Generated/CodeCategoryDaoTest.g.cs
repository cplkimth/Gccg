// <auto-generated> This file has been generated by Gccg</auto-generated>
#region using
using Chinook.Data;
#endregion

namespace Chinook.DataUnitTest.DaoTests.Synchronous;


[TestClass]
public partial class CodeCategoryDaoTest : EntityDaoTest<CodeCategory>
{

    [TestInitialize]
    public async Task Initialize()
    {
        var procedures = new ChinookContextProcedures(DbContextFactory.Create());
        await procedures.usp_InitializeAsync();
    }

    [TestMethod]
    public void GetCount()
    {
        var count = Dao.CodeCategory.GetCount();
        
        count.ShouldBeGreaterThan(0);
    }

    [TestMethod]
    public void GetByKey()
    {
        var first = Dao.CodeCategory.GetFirst();
        var entity = Dao.CodeCategory.GetByKey(first.CodeCategoryId );
        
        entity.PrimaryKeyValues.ShouldBe(first.PrimaryKeyValues);
    }

    [TestMethod]
    public void ExistsByKey()
    {
        var first = Dao.CodeCategory.GetFirst();
        
        (Dao.CodeCategory.ExistsByKey(first.CodeCategoryId )).ShouldBeTrue();
    }

    [TestMethod]
    public void Exists()
    {
        var first = Dao.CodeCategory.GetFirst();
        
        (Dao.CodeCategory.Exists(x => x.CodeCategoryId == first.CodeCategoryId )).ShouldBeTrue();
    }

    [TestMethod]
    public void DeleteByKey()
    {
        var first = GetForDelete();
        Dao.CodeCategory.DeleteByKey(first.CodeCategoryId );
        
        (Dao.CodeCategory.ExistsByKey(first.CodeCategoryId )).ShouldBeFalse();
    }

    [TestMethod]
    public void DeleteAll()
    {
        var first = GetForDelete();
        var count = Dao.CodeCategory.DeleteAll(x => x.CodeCategoryId == first.CodeCategoryId );
        count.ShouldBeGreaterThan(0);

        (Dao.CodeCategory.ExistsByKey(first.CodeCategoryId )).ShouldBeFalse();
    }

    [TestMethod]
    public void Insert()
    {
        var first = Dao.CodeCategory.GetFirst();

        var oldCount = Dao.CodeCategory.GetCount();

        var entity = first.Clone();
        entity.ClearKeyValues();
        Asynchronous.CodeCategoryDaoTestAsync.FillForInsert(entity);
        entity = Dao.CodeCategory.Insert(entity);

        var newCount = Dao.CodeCategory.GetCount();

        newCount.ShouldBe(oldCount + 1);
    }

    [TestMethod]
    public void Update()
    {
        var entity = Dao.CodeCategory.GetFirst();
        object value = Asynchronous.CodeCategoryDaoTestAsync.SetUpdateField(entity);

        if (value == null)
            return;

        Dao.CodeCategory.Update(entity);

        entity = Dao.CodeCategory.GetFirst();

        Asynchronous.CodeCategoryDaoTestAsync.GetUpdateField(entity).ShouldBe(value);
    }

    [TestMethod]
    public void GetFirst()
    {
        var entity = Dao.CodeCategory.GetFirst();
        entity.ShouldNotBeNull();
    }
}


