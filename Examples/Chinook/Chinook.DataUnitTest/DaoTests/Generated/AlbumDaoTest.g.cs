// <auto-generated> This file has been generated by Gccg</auto-generated>
#region using
using System.Net.Http.Json;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Chinook.Data;
#endregion

namespace Chinook.DataUnitTest.DaoTests;


[TestClass]
public partial class AlbumDaoTest : EntityDaoTest<Album>
{

    [TestInitialize]
    public async Task Initialize()
    {
        var procedures = new ChinookContextProcedures(DbContextFactory.Create());
        await procedures.usp_InitializeAsync();
    }

    [TestMethod]
    public async Task GetCount()
    {
        var count = await Dao.Album.GetCount();
        
        count.ShouldBeGreaterThan(0);
    }

    [TestMethod]
    public async Task GetByKey()
    {
        var first = await Dao.Album.GetFirst();
        var entity = await Dao.Album.GetByKey(first.AlbumId );
        
        entity.PrimaryKeyValues.ShouldBe(first.PrimaryKeyValues);
    }

    [TestMethod]
    public async Task ExistsByKey()
    {
        var first = await Dao.Album.GetFirst();
        
        (await Dao.Album.ExistsByKey(first.AlbumId )).ShouldBeTrue();
    }

    [TestMethod]
    public async Task Exists()
    {
        var first = await Dao.Album.GetFirst();
        
        (await Dao.Album.Exists(x => x.AlbumId == first.AlbumId )).ShouldBeTrue();
    }

    [TestMethod]
    public async Task DeleteByKey()
    {
        var first = await GetForDelete();
        await Dao.Album.DeleteByKey(first.AlbumId );
        
        (await Dao.Album.ExistsByKey(first.AlbumId )).ShouldBeFalse();
    }

    [TestMethod]
    public async Task DeleteAll()
    {
        var first = await GetForDelete();
        var count = await Dao.Album.DeleteAll(x => x.AlbumId == first.AlbumId );
        count.ShouldBeGreaterThan(0);

        (await Dao.Album.ExistsByKey(first.AlbumId )).ShouldBeFalse();
    }

    [TestMethod]
    public async Task Insert()
    {
        var first = await Dao.Album.GetFirst();

        var oldCount = await Dao.Album.GetCount();

        var entity = first.Clone();
        entity.ClearKeyValues();
        FillForInsert(entity);
        entity = await Dao.Album.Insert(entity);

        var newCount = await Dao.Album.GetCount();

        newCount.ShouldBe(oldCount + 1);
    }

    [TestMethod]
    public async Task Update()
    {
        var entity = await Dao.Album.GetFirst();
        object value = SetUpdateField(entity);

        if (value == null)
            return;

        await Dao.Album.Update(entity);

        entity = await Dao.Album.GetFirst();

        GetUpdateField(entity).ShouldBe(value);
    }

    [TestMethod]
    public async Task GetFirst()
    {
        var entity = await Dao.Album.GetFirst();
        entity.ShouldNotBeNull();
    }
}


