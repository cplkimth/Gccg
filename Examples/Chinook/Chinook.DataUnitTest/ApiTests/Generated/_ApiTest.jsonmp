{
	"Version":2,
	"Scope":1,
	"TargetPath":"`Name`ApiTest.g.cs",
	"Overwritable": false
}
*** body starts here ***// <auto-generated> This file has been generated by Gccg</auto-generated>
#region
using Chinook.Data;
#endregion

namespace Chinook.DataUnitTest.ApiTests;

`T
[TestClass]
public partial class `Name`ApiTest
{
    [TestInitialize]
    public void Initialize()
    {
        Api.Initialize().Wait();
    }

    [TestMethod]
    public async Task GetCount()
    {
        var count = await Api.`Name`.GetCountAsync();

        count.ShouldBeGreaterThan(0);
    }

    [TestMethod]
    public async Task GetByKey()
    {
        var first = await Api.`Name`.GetFirstAsync();
        var entity = await Api.`Name`.GetByKeyAsync(`P:, :first.`Name` ``);

        entity.PrimaryKeyValues.ShouldBe(first.PrimaryKeyValues);
    }

    [TestMethod]
    public async Task ExistsByKey()
    {
        var first = await Api.`Name`.GetFirstAsync();

        (await Dao.`Name`.ExistsByKeyAsync(`P:, :first.`Name` ``)).ShouldBeTrue();
    }

    [TestMethod]
    public async Task Exists()
    {
        var first = await Api.`Name`.GetFirstAsync();

        (await Api.`Name`.ExistsByKeyAsync(`P:, :first.`Name` ``)).ShouldBeTrue();
    }

    [TestMethod]
    public async Task DeleteByKey()
    {
        var first = await Api.`Name`.GetFirstAsync();
        await Api.`Name`.DeleteByKeyAsync(`P:, :first.`Name` ``);

        (await Api.`Name`.ExistsByKeyAsync(`P:, :first.`Name` ``)).ShouldBeFalse();
    }

    [TestMethod]
    public async Task Insert()
    {
        var first = await Api.`Name`.GetFirstAsync();

        var oldCount = await Api.`Name`.GetCountAsync();

        var entity = first.Clone();
        entity.ClearKeyValues();
        `Name`DaoTest.FillForInsert(entity);
        entity = await Api.`Name`.InsertAsync(entity);

        var newCount = await Api.`Name`.GetCountAsync();

        newCount.ShouldBe(oldCount + 1);
    }

    [TestMethod]
    public async Task Update()
    {
        var entity = await Api.`Name`.GetFirstAsync();
        object value = `Name`DaoTest.SetUpdateField(entity);
        await Api.`Name`.UpdateAsync(entity);

        entity = await Api.`Name`.GetFirstAsync();

        `Name`DaoTest.GetUpdateField(entity).ShouldBe(value);
    }

    [TestMethod]
    public async Task GetFirst()
    {
        var entity = await Api.`Name`.GetFirstAsync();
        entity.ShouldNotBeNull();
    }

    `F::
	[TestMethod]
    public async Task GetBy`Name`()
    {
        var list = await Api.`Table`.GetBy`Name`Async();

        foreach (var item in list)
            item.`Name`.ShouldBe();
    }
	``
}
T`