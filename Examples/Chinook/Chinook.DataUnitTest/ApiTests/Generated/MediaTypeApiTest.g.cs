// <auto-generated> This file has been generated by Gccg</auto-generated>
#region
using Chinook.Data;
#endregion

namespace Chinook.DataUnitTest.ApiTests;


[TestClass]
public partial class MediaTypeApiTest
{
    [TestInitialize]
    public void Initialize()
    {
        Api.Initialize().Wait();
    }

    [TestMethod]
    public async Task GetCount()
    {
        var count = await Api.MediaType.GetCountAsync();

        count.Should().BeGreaterThan(0);
    }

    [TestMethod]
    public async Task GetByKey()
    {
        var first = await Api.MediaType.GetFirstAsync();
        var entity = await Api.MediaType.GetByKeyAsync(first.MediaTypeId );

        entity.PrimaryKeyValues.Should().Be(first.PrimaryKeyValues);
    }

    [TestMethod]
    public async Task ExistsByKey()
    {
        var first = await Api.MediaType.GetFirstAsync();

        (await Dao.MediaType.ExistsByKeyAsync(first.MediaTypeId )).Should().BeTrue();
    }

    [TestMethod]
    public async Task Exists()
    {
        var first = await Api.MediaType.GetFirstAsync();

        (await Api.MediaType.ExistsByKeyAsync(first.MediaTypeId )).Should().BeTrue();
    }

    [TestMethod]
    public async Task DeleteByKey()
    {
        var first = await Api.MediaType.GetFirstAsync();
        await Api.MediaType.DeleteByKeyAsync(first.MediaTypeId );

        (await Api.MediaType.ExistsByKeyAsync(first.MediaTypeId )).Should().BeFalse();
    }

    [TestMethod]
    public async Task Insert()
    {
        var first = await Api.MediaType.GetFirstAsync();

        var oldCount = await Api.MediaType.GetCountAsync();

        var entity = first.Clone();
        entity.ClearKeyValues();
        MediaTypeDaoTest.FillForInsert(entity);
        entity = await Api.MediaType.InsertAsync(entity);

        var newCount = await Api.MediaType.GetCountAsync();

        newCount.Should().Be(oldCount + 1);
    }

    [TestMethod]
    public async Task Update()
    {
        var entity = await Api.MediaType.GetFirstAsync();
        object value = MediaTypeDaoTest.SetUpdateField(entity);
        await Api.MediaType.UpdateAsync(entity);

        entity = await Api.MediaType.GetFirstAsync();

        MediaTypeDaoTest.GetUpdateField(entity).Should().Be(value);
    }

    [TestMethod]
    public async Task GetFirst()
    {
        var entity = await Api.MediaType.GetFirstAsync();
        entity.Should().NotBeNull();
    }

    
}

