// <auto-generated> This file has been generated by Gccg</auto-generated>
#region
using Chinook.Data;
using Chinook.DataUnitTest.DaoTests.Asynchronous;
#endregion

namespace Chinook.DataUnitTest.ApiTests;


[TestClass]
public partial class CustomerApiTest
{
    [TestInitialize]
    public void Initialize()
    {
        Api.Initialize().Wait();
    }

    [TestMethod]
    public async Task GetCount()
    {
        var count = await Api.Customer.GetCount();

        count.ShouldBeGreaterThan(0);
    }

    [TestMethod]
    public async Task GetByKey()
    {
        var first = await Api.Customer.GetFirst();
        var entity = await Api.Customer.GetByKey(first.CustomerId );

        entity.PrimaryKeyValues.ShouldBe(first.PrimaryKeyValues);
    }

    [TestMethod]
    public async Task ExistsByKey()
    {
        var first = await Api.Customer.GetFirst();

        (await Dao.Customer.ExistsByKeyAsync(first.CustomerId )).ShouldBeTrue();
    }

    [TestMethod]
    public async Task Exists()
    {
        var first = await Api.Customer.GetFirst();

        (await Api.Customer.ExistsByKey(first.CustomerId )).ShouldBeTrue();
    }

    [TestMethod]
    public async Task DeleteByKey()
    {
        var first = await Api.Customer.GetFirst();
        await Api.Customer.DeleteByKey(first.CustomerId );

        (await Api.Customer.ExistsByKey(first.CustomerId )).ShouldBeFalse();
    }

    [TestMethod]
    public async Task Insert()
    {
        var first = await Api.Customer.GetFirst();

        var oldCount = await Api.Customer.GetCount();

        var entity = first.Clone();
        entity.ClearKeyValues();
        CustomerDaoTestAsync.FillForInsert(entity);
        entity = await Api.Customer.Insert(entity);

        var newCount = await Api.Customer.GetCount();

        newCount.ShouldBe(oldCount + 1);
    }

    [TestMethod]
    public async Task Update()
    {
        var entity = await Api.Customer.GetFirst();
        object value = CustomerDaoTestAsync.SetUpdateField(entity);
        await Api.Customer.Update(entity);

        entity = await Api.Customer.GetFirst();

        CustomerDaoTestAsync.GetUpdateField(entity).ShouldBe(value);
    }

    [TestMethod]
    public async Task GetFirst()
    {
        var entity = await Api.Customer.GetFirst();
        entity.ShouldNotBeNull();
    }

    
	[TestMethod]
    public async Task GetBySupportRepId()
    {
        var list = await Api.Customer.GetBySupportRepId(1);

        foreach (var item in list)
            item.SupportRepId.ShouldBe(1);
    }
	
}

