// <auto-generated> This file has been generated by Gccg</auto-generated>
#region
using Chinook.Data;
using Chinook.DataUnitTest.DaoTests.Asynchronous;
#endregion

namespace Chinook.DataUnitTest.ApiTests;


[TestClass]
public partial class PlaylistTrackApiTest
{
    [TestInitialize]
    public void Initialize()
    {
        Api.Initialize().Wait();
    }

    [TestMethod]
    public async Task GetCount()
    {
        var count = await Api.PlaylistTrack.GetCount();

        count.ShouldBeGreaterThan(0);
    }

    [TestMethod]
    public async Task GetByKey()
    {
        var first = await Api.PlaylistTrack.GetFirst();
        var entity = await Api.PlaylistTrack.GetByKey(first.PlaylistId , first.TrackId );

        entity.PrimaryKeyValues.ShouldBe(first.PrimaryKeyValues);
    }

    [TestMethod]
    public async Task ExistsByKey()
    {
        var first = await Api.PlaylistTrack.GetFirst();

        (await Dao.PlaylistTrack.ExistsByKeyAsync(first.PlaylistId , first.TrackId )).ShouldBeTrue();
    }

    [TestMethod]
    public async Task Exists()
    {
        var first = await Api.PlaylistTrack.GetFirst();

        (await Api.PlaylistTrack.ExistsByKey(first.PlaylistId , first.TrackId )).ShouldBeTrue();
    }

    [TestMethod]
    public async Task DeleteByKey()
    {
        var first = await Api.PlaylistTrack.GetFirst();
        await Api.PlaylistTrack.DeleteByKey(first.PlaylistId , first.TrackId );

        (await Api.PlaylistTrack.ExistsByKey(first.PlaylistId , first.TrackId )).ShouldBeFalse();
    }

    [TestMethod]
    public async Task Insert()
    {
        var first = await Api.PlaylistTrack.GetFirst();

        var oldCount = await Api.PlaylistTrack.GetCount();

        var entity = first.Clone();
        entity.ClearKeyValues();
        PlaylistTrackDaoTestAsync.FillForInsert(entity);
        entity = await Api.PlaylistTrack.Insert(entity);

        var newCount = await Api.PlaylistTrack.GetCount();

        newCount.ShouldBe(oldCount + 1);
    }

    [TestMethod]
    public async Task GetFirst()
    {
        var entity = await Api.PlaylistTrack.GetFirst();
        entity.ShouldNotBeNull();
    }

    
	[TestMethod]
    public async Task GetByPlaylistId()
    {
        var list = await Api.PlaylistTrack.GetByPlaylistId(1);

        foreach (var item in list)
            item.PlaylistId.ShouldBe(1);
    }
	
	[TestMethod]
    public async Task GetByTrackId()
    {
        var list = await Api.PlaylistTrack.GetByTrackId(1);

        foreach (var item in list)
            item.TrackId.ShouldBe(1);
    }
	
}

