
// This file has been generated by Gccg on 2023-09-21 오전 5:50:04.
#region using
using System.Net.Http.Json;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Chinook.Data;
#endregion

namespace Chinook.Services;

public partial class Service
{
    public static string JwtToken { get; set; }

    public static string BaseAddress { get; set; }
    
    private const string Authorization = "Authorization";
    private const string Bearer = "Bearer";

    internal static HttpClient CreateHttpClient()
    {
        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri(Service.BaseAddress);

        if (Service.JwtToken != null)
            client.DefaultRequestHeaders.Add(Authorization, $"{Bearer} {Service.JwtToken}");

        return client;
    }

    public static async Task<string> GetJwtToken(string userName, string password)
    {
        var authInfo = new {UserName = "5", Password = "Andrew"};
        var response = await CreateHttpClient().PostAsJsonAsync("api/auth", authInfo);
        return response.Content.ReadAsStringAsync().Result;
    }

    #region clients
     public static AlbumService Album => new AlbumService(); 
 public static ArtistService Artist => new ArtistService(); 
 public static CompanyService Company => new CompanyService(); 
 public static CustomerService Customer => new CustomerService(); 
 public static EmployeeService Employee => new EmployeeService(); 
 public static GenreService Genre => new GenreService(); 
 public static InvoiceService Invoice => new InvoiceService(); 
 public static InvoiceLineService InvoiceLine => new InvoiceLineService(); 
 public static MediaTypeService MediaType => new MediaTypeService(); 
 public static PlaylistService Playlist => new PlaylistService(); 
 public static PlaylistTrackService PlaylistTrack => new PlaylistTrackService(); 
 public static PlaylistTrackHistoryService PlaylistTrackHistory => new PlaylistTrackHistoryService(); 
 public static TodoItemService TodoItem => new TodoItemService(); 
 public static TrackService Track => new TrackService(); 

    #endregion
}

public abstract partial class EntityService<T>
{
    protected const string Authorization = "Authorization";
    protected const string Bearer = "Bearer";

    protected string GetAddress(params object[] parameters)
    {
        StringBuilder builder = new ($"api/{EntityName}");
        
        foreach (var parameter in parameters)
            builder.Append($"/{parameter}");

        return builder.ToString();
    }

    protected HttpClient CreateHttpClient() => Service.CreateHttpClient();

    protected static JsonSerializerOptions Options { get; } = new ()
      {
          DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingDefault
      };

    protected abstract string EntityName { get; }

    public Task<List<T>> GetAsync()
    {
        return CreateHttpClient().GetFromJsonAsync<List<T>>(GetAddress(), Options);
    }

    public Task<T> GetFirstAsync()
    {
        HttpClient client = CreateHttpClient();
        return client.GetFromJsonAsync<T>(GetAddress("first"), Options);
    }

    public Task<int> GetCountAsync()
    {
        HttpClient client = CreateHttpClient();
        return client.GetFromJsonAsync<int>(GetAddress("count"), Options);
    }

    public async Task<T> InsertAsync(T entity)
    {
        HttpClient client = CreateHttpClient();
        var response = await client.PostAsJsonAsync(GetAddress(), entity);
        return await response.Content.ReadFromJsonAsync<T>();
    }

    public async Task<int> UpdateAsync(T entity)
    {
        HttpClient client = CreateHttpClient();
        var response = await client.PutAsJsonAsync(GetAddress(), entity);
        return await response.Content.ReadFromJsonAsync<int>();
    }
}

#region clients

public partial class AlbumService : EntityService<Album>
{
    protected override string EntityName => nameof(Album);

    public Task<Album> GetByKeyAsync(int albumId )
    {
        HttpClient client = CreateHttpClient();
        return client.GetFromJsonAsync<Album>(GetAddress(albumId ), Options);
    }

    public async Task<int> DeleteAsync(int albumId )
    {
        HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(albumId ));
        return await response.Content.ReadFromJsonAsync<int>();
    }
}


public partial class ArtistService : EntityService<Artist>
{
    protected override string EntityName => nameof(Artist);

    public Task<Artist> GetByKeyAsync(int artistId )
    {
        HttpClient client = CreateHttpClient();
        return client.GetFromJsonAsync<Artist>(GetAddress(artistId ), Options);
    }

    public async Task<int> DeleteAsync(int artistId )
    {
        HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(artistId ));
        return await response.Content.ReadFromJsonAsync<int>();
    }
}


public partial class CompanyService : EntityService<Company>
{
    protected override string EntityName => nameof(Company);

    public Task<Company> GetByKeyAsync(int companyId )
    {
        HttpClient client = CreateHttpClient();
        return client.GetFromJsonAsync<Company>(GetAddress(companyId ), Options);
    }

    public async Task<int> DeleteAsync(int companyId )
    {
        HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(companyId ));
        return await response.Content.ReadFromJsonAsync<int>();
    }
}


public partial class CustomerService : EntityService<Customer>
{
    protected override string EntityName => nameof(Customer);

    public Task<Customer> GetByKeyAsync(int customerId )
    {
        HttpClient client = CreateHttpClient();
        return client.GetFromJsonAsync<Customer>(GetAddress(customerId ), Options);
    }

    public async Task<int> DeleteAsync(int customerId )
    {
        HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(customerId ));
        return await response.Content.ReadFromJsonAsync<int>();
    }
}


public partial class EmployeeService : EntityService<Employee>
{
    protected override string EntityName => nameof(Employee);

    public Task<Employee> GetByKeyAsync(int employeeId )
    {
        HttpClient client = CreateHttpClient();
        return client.GetFromJsonAsync<Employee>(GetAddress(employeeId ), Options);
    }

    public async Task<int> DeleteAsync(int employeeId )
    {
        HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(employeeId ));
        return await response.Content.ReadFromJsonAsync<int>();
    }
}


public partial class GenreService : EntityService<Genre>
{
    protected override string EntityName => nameof(Genre);

    public Task<Genre> GetByKeyAsync(int genreId )
    {
        HttpClient client = CreateHttpClient();
        return client.GetFromJsonAsync<Genre>(GetAddress(genreId ), Options);
    }

    public async Task<int> DeleteAsync(int genreId )
    {
        HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(genreId ));
        return await response.Content.ReadFromJsonAsync<int>();
    }
}


public partial class InvoiceService : EntityService<Invoice>
{
    protected override string EntityName => nameof(Invoice);

    public Task<Invoice> GetByKeyAsync(int invoiceId )
    {
        HttpClient client = CreateHttpClient();
        return client.GetFromJsonAsync<Invoice>(GetAddress(invoiceId ), Options);
    }

    public async Task<int> DeleteAsync(int invoiceId )
    {
        HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(invoiceId ));
        return await response.Content.ReadFromJsonAsync<int>();
    }
}


public partial class InvoiceLineService : EntityService<InvoiceLine>
{
    protected override string EntityName => nameof(InvoiceLine);

    public Task<InvoiceLine> GetByKeyAsync(int invoiceLineId )
    {
        HttpClient client = CreateHttpClient();
        return client.GetFromJsonAsync<InvoiceLine>(GetAddress(invoiceLineId ), Options);
    }

    public async Task<int> DeleteAsync(int invoiceLineId )
    {
        HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(invoiceLineId ));
        return await response.Content.ReadFromJsonAsync<int>();
    }
}


public partial class MediaTypeService : EntityService<MediaType>
{
    protected override string EntityName => nameof(MediaType);

    public Task<MediaType> GetByKeyAsync(int mediaTypeId )
    {
        HttpClient client = CreateHttpClient();
        return client.GetFromJsonAsync<MediaType>(GetAddress(mediaTypeId ), Options);
    }

    public async Task<int> DeleteAsync(int mediaTypeId )
    {
        HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(mediaTypeId ));
        return await response.Content.ReadFromJsonAsync<int>();
    }
}


public partial class PlaylistService : EntityService<Playlist>
{
    protected override string EntityName => nameof(Playlist);

    public Task<Playlist> GetByKeyAsync(int playlistId )
    {
        HttpClient client = CreateHttpClient();
        return client.GetFromJsonAsync<Playlist>(GetAddress(playlistId ), Options);
    }

    public async Task<int> DeleteAsync(int playlistId )
    {
        HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(playlistId ));
        return await response.Content.ReadFromJsonAsync<int>();
    }
}


public partial class PlaylistTrackService : EntityService<PlaylistTrack>
{
    protected override string EntityName => nameof(PlaylistTrack);

    public Task<PlaylistTrack> GetByKeyAsync(int playlistId , int trackId )
    {
        HttpClient client = CreateHttpClient();
        return client.GetFromJsonAsync<PlaylistTrack>(GetAddress(playlistId , trackId ), Options);
    }

    public async Task<int> DeleteAsync(int playlistId , int trackId )
    {
        HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(playlistId , trackId ));
        return await response.Content.ReadFromJsonAsync<int>();
    }
}


public partial class PlaylistTrackHistoryService : EntityService<PlaylistTrackHistory>
{
    protected override string EntityName => nameof(PlaylistTrackHistory);

    public Task<PlaylistTrackHistory> GetByKeyAsync(int playlistId , int trackId , DateTime writtenAt )
    {
        HttpClient client = CreateHttpClient();
        return client.GetFromJsonAsync<PlaylistTrackHistory>(GetAddress(playlistId , trackId , writtenAt ), Options);
    }

    public async Task<int> DeleteAsync(int playlistId , int trackId , DateTime writtenAt )
    {
        HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(playlistId , trackId , writtenAt ));
        return await response.Content.ReadFromJsonAsync<int>();
    }
}


public partial class TodoItemService : EntityService<TodoItem>
{
    protected override string EntityName => nameof(TodoItem);

    public Task<TodoItem> GetByKeyAsync(int id )
    {
        HttpClient client = CreateHttpClient();
        return client.GetFromJsonAsync<TodoItem>(GetAddress(id ), Options);
    }

    public async Task<int> DeleteAsync(int id )
    {
        HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(id ));
        return await response.Content.ReadFromJsonAsync<int>();
    }
}


public partial class TrackService : EntityService<Track>
{
    protected override string EntityName => nameof(Track);

    public Task<Track> GetByKeyAsync(int trackId )
    {
        HttpClient client = CreateHttpClient();
        return client.GetFromJsonAsync<Track>(GetAddress(trackId ), Options);
    }

    public async Task<int> DeleteAsync(int trackId )
    {
        HttpClient client = CreateHttpClient();
        var response  = await client.DeleteAsync(GetAddress(trackId ));
        return await response.Content.ReadFromJsonAsync<int>();
    }
}


#endregion